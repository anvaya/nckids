<?php

/**
 * Base class that represents a row from the 'client' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Mar 29 20:17:55 2011
 *
 * @package    lib.model.om
 */
abstract class BaseClient extends BaseObject  implements Persistent {


  const PEER = 'ClientPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ClientPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the dob field.
	 * @var        string
	 */
	protected $dob;

	/**
	 * The value for the parent_first field.
	 * @var        string
	 */
	protected $parent_first;

	/**
	 * The value for the parent_last field.
	 * @var        string
	 */
	protected $parent_last;

	/**
	 * The value for the parent2_first field.
	 * @var        string
	 */
	protected $parent2_first;

	/**
	 * The value for the parent2_last field.
	 * @var        string
	 */
	protected $parent2_last;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the address_2 field.
	 * @var        string
	 */
	protected $address_2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zip field.
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the county_id field.
	 * @var        int
	 */
	protected $county_id;

	/**
	 * The value for the district_id field.
	 * @var        int
	 */
	protected $district_id;

	/**
	 * The value for the home_phone field.
	 * @var        string
	 */
	protected $home_phone;

	/**
	 * The value for the work_phone field.
	 * @var        string
	 */
	protected $work_phone;

	/**
	 * The value for the cell_phone field.
	 * @var        string
	 */
	protected $cell_phone;

	/**
	 * The value for the blue_card field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $blue_card;

	/**
	 * The value for the immunizations field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $immunizations;

	/**
	 * The value for the waiting_list field.
	 * @var        string
	 */
	protected $waiting_list;

	/**
	 * The value for the is_iep field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_iep;

	/**
	 * The value for the physical_exp field.
	 * @var        string
	 */
	protected $physical_exp;

	/**
	 * The value for the pediatrician field.
	 * @var        string
	 */
	protected $pediatrician;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the service_coordinator_id field.
	 * @var        int
	 */
	protected $service_coordinator_id;

	/**
	 * The value for the external_service field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $external_service;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        County
	 */
	protected $aCounty;

	/**
	 * @var        District
	 */
	protected $aDistrict;

	/**
	 * @var        ServiceCoordinator
	 */
	protected $aServiceCoordinator;

	/**
	 * @var        array ClientService[] Collection to store aggregation of ClientService objects.
	 */
	protected $collClientServices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collClientServices.
	 */
	private $lastClientServiceCriteria = null;

	/**
	 * @var        array NoteEntry[] Collection to store aggregation of NoteEntry objects.
	 */
	protected $collNoteEntrys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNoteEntrys.
	 */
	private $lastNoteEntryCriteria = null;

	/**
	 * @var        array NoteEntryKids[] Collection to store aggregation of NoteEntryKids objects.
	 */
	protected $collNoteEntryKidss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNoteEntryKidss.
	 */
	private $lastNoteEntryKidsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseClient object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->blue_card = false;
		$this->immunizations = false;
		$this->is_iep = false;
		$this->external_service = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [optionally formatted] temporal [dob] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDob($format = 'Y-m-d H:i:s')
	{
		if ($this->dob === null) {
			return null;
		}


		if ($this->dob === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dob);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dob, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [parent_first] column value.
	 * 
	 * @return     string
	 */
	public function getParentFirst()
	{
		return $this->parent_first;
	}

	/**
	 * Get the [parent_last] column value.
	 * 
	 * @return     string
	 */
	public function getParentLast()
	{
		return $this->parent_last;
	}

	/**
	 * Get the [parent2_first] column value.
	 * 
	 * @return     string
	 */
	public function getParent2First()
	{
		return $this->parent2_first;
	}

	/**
	 * Get the [parent2_last] column value.
	 * 
	 * @return     string
	 */
	public function getParent2Last()
	{
		return $this->parent2_last;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [address_2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address_2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [county_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountyId()
	{
		return $this->county_id;
	}

	/**
	 * Get the [district_id] column value.
	 * 
	 * @return     int
	 */
	public function getDistrictId()
	{
		return $this->district_id;
	}

	/**
	 * Get the [home_phone] column value.
	 * 
	 * @return     string
	 */
	public function getHomePhone()
	{
		return $this->home_phone;
	}

	/**
	 * Get the [work_phone] column value.
	 * 
	 * @return     string
	 */
	public function getWorkPhone()
	{
		return $this->work_phone;
	}

	/**
	 * Get the [cell_phone] column value.
	 * 
	 * @return     string
	 */
	public function getCellPhone()
	{
		return $this->cell_phone;
	}

	/**
	 * Get the [blue_card] column value.
	 * 
	 * @return     boolean
	 */
	public function getBlueCard()
	{
		return $this->blue_card;
	}

	/**
	 * Get the [immunizations] column value.
	 * 
	 * @return     boolean
	 */
	public function getImmunizations()
	{
		return $this->immunizations;
	}

	/**
	 * Get the [optionally formatted] temporal [waiting_list] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWaitingList($format = 'Y-m-d H:i:s')
	{
		if ($this->waiting_list === null) {
			return null;
		}


		if ($this->waiting_list === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->waiting_list);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->waiting_list, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_iep] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsIep()
	{
		return $this->is_iep;
	}

	/**
	 * Get the [optionally formatted] temporal [physical_exp] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPhysicalExp($format = 'Y-m-d H:i:s')
	{
		if ($this->physical_exp === null) {
			return null;
		}


		if ($this->physical_exp === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->physical_exp);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->physical_exp, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [pediatrician] column value.
	 * 
	 * @return     string
	 */
	public function getPediatrician()
	{
		return $this->pediatrician;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [service_coordinator_id] column value.
	 * 
	 * @return     int
	 */
	public function getServiceCoordinatorId()
	{
		return $this->service_coordinator_id;
	}

	/**
	 * Get the [external_service] column value.
	 * 
	 * @return     boolean
	 */
	public function getExternalService()
	{
		return $this->external_service;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ClientPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = ClientPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = ClientPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Sets the value of [dob] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Client The current object (for fluent API support)
	 */
	public function setDob($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dob !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dob !== null && $tmpDt = new DateTime($this->dob)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dob = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientPeer::DOB;
			}
		} // if either are not null

		return $this;
	} // setDob()

	/**
	 * Set the value of [parent_first] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setParentFirst($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parent_first !== $v) {
			$this->parent_first = $v;
			$this->modifiedColumns[] = ClientPeer::PARENT_FIRST;
		}

		return $this;
	} // setParentFirst()

	/**
	 * Set the value of [parent_last] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setParentLast($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parent_last !== $v) {
			$this->parent_last = $v;
			$this->modifiedColumns[] = ClientPeer::PARENT_LAST;
		}

		return $this;
	} // setParentLast()

	/**
	 * Set the value of [parent2_first] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setParent2First($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parent2_first !== $v) {
			$this->parent2_first = $v;
			$this->modifiedColumns[] = ClientPeer::PARENT2_FIRST;
		}

		return $this;
	} // setParent2First()

	/**
	 * Set the value of [parent2_last] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setParent2Last($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parent2_last !== $v) {
			$this->parent2_last = $v;
			$this->modifiedColumns[] = ClientPeer::PARENT2_LAST;
		}

		return $this;
	} // setParent2Last()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = ClientPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [address_2] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address_2 !== $v) {
			$this->address_2 = $v;
			$this->modifiedColumns[] = ClientPeer::ADDRESS_2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = ClientPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = ClientPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v) {
			$this->zip = $v;
			$this->modifiedColumns[] = ClientPeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [county_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setCountyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->county_id !== $v) {
			$this->county_id = $v;
			$this->modifiedColumns[] = ClientPeer::COUNTY_ID;
		}

		if ($this->aCounty !== null && $this->aCounty->getId() !== $v) {
			$this->aCounty = null;
		}

		return $this;
	} // setCountyId()

	/**
	 * Set the value of [district_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setDistrictId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->district_id !== $v) {
			$this->district_id = $v;
			$this->modifiedColumns[] = ClientPeer::DISTRICT_ID;
		}

		if ($this->aDistrict !== null && $this->aDistrict->getId() !== $v) {
			$this->aDistrict = null;
		}

		return $this;
	} // setDistrictId()

	/**
	 * Set the value of [home_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setHomePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_phone !== $v) {
			$this->home_phone = $v;
			$this->modifiedColumns[] = ClientPeer::HOME_PHONE;
		}

		return $this;
	} // setHomePhone()

	/**
	 * Set the value of [work_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setWorkPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->work_phone !== $v) {
			$this->work_phone = $v;
			$this->modifiedColumns[] = ClientPeer::WORK_PHONE;
		}

		return $this;
	} // setWorkPhone()

	/**
	 * Set the value of [cell_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setCellPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cell_phone !== $v) {
			$this->cell_phone = $v;
			$this->modifiedColumns[] = ClientPeer::CELL_PHONE;
		}

		return $this;
	} // setCellPhone()

	/**
	 * Set the value of [blue_card] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setBlueCard($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->blue_card !== $v || $v === false) {
			$this->blue_card = $v;
			$this->modifiedColumns[] = ClientPeer::BLUE_CARD;
		}

		return $this;
	} // setBlueCard()

	/**
	 * Set the value of [immunizations] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setImmunizations($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->immunizations !== $v || $v === false) {
			$this->immunizations = $v;
			$this->modifiedColumns[] = ClientPeer::IMMUNIZATIONS;
		}

		return $this;
	} // setImmunizations()

	/**
	 * Sets the value of [waiting_list] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Client The current object (for fluent API support)
	 */
	public function setWaitingList($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->waiting_list !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->waiting_list !== null && $tmpDt = new DateTime($this->waiting_list)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->waiting_list = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientPeer::WAITING_LIST;
			}
		} // if either are not null

		return $this;
	} // setWaitingList()

	/**
	 * Set the value of [is_iep] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setIsIep($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_iep !== $v || $v === false) {
			$this->is_iep = $v;
			$this->modifiedColumns[] = ClientPeer::IS_IEP;
		}

		return $this;
	} // setIsIep()

	/**
	 * Sets the value of [physical_exp] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Client The current object (for fluent API support)
	 */
	public function setPhysicalExp($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->physical_exp !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->physical_exp !== null && $tmpDt = new DateTime($this->physical_exp)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->physical_exp = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientPeer::PHYSICAL_EXP;
			}
		} // if either are not null

		return $this;
	} // setPhysicalExp()

	/**
	 * Set the value of [pediatrician] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setPediatrician($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pediatrician !== $v) {
			$this->pediatrician = $v;
			$this->modifiedColumns[] = ClientPeer::PEDIATRICIAN;
		}

		return $this;
	} // setPediatrician()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = ClientPeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Set the value of [service_coordinator_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setServiceCoordinatorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->service_coordinator_id !== $v) {
			$this->service_coordinator_id = $v;
			$this->modifiedColumns[] = ClientPeer::SERVICE_COORDINATOR_ID;
		}

		if ($this->aServiceCoordinator !== null && $this->aServiceCoordinator->getId() !== $v) {
			$this->aServiceCoordinator = null;
		}

		return $this;
	} // setServiceCoordinatorId()

	/**
	 * Set the value of [external_service] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Client The current object (for fluent API support)
	 */
	public function setExternalService($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->external_service !== $v || $v === false) {
			$this->external_service = $v;
			$this->modifiedColumns[] = ClientPeer::EXTERNAL_SERVICE;
		}

		return $this;
	} // setExternalService()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Client The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Client The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ClientPeer::BLUE_CARD,ClientPeer::IMMUNIZATIONS,ClientPeer::IS_IEP,ClientPeer::EXTERNAL_SERVICE))) {
				return false;
			}

			if ($this->blue_card !== false) {
				return false;
			}

			if ($this->immunizations !== false) {
				return false;
			}

			if ($this->is_iep !== false) {
				return false;
			}

			if ($this->external_service !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->dob = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->parent_first = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->parent_last = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->parent2_first = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->parent2_last = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->address = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->address_2 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->city = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->state = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->zip = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->county_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->district_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->home_phone = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->work_phone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->cell_phone = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->blue_card = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->immunizations = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->waiting_list = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->is_iep = ($row[$startcol + 21] !== null) ? (boolean) $row[$startcol + 21] : null;
			$this->physical_exp = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->pediatrician = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->notes = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->service_coordinator_id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->external_service = ($row[$startcol + 26] !== null) ? (boolean) $row[$startcol + 26] : null;
			$this->created_at = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->updated_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Client object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCounty !== null && $this->county_id !== $this->aCounty->getId()) {
			$this->aCounty = null;
		}
		if ($this->aDistrict !== null && $this->district_id !== $this->aDistrict->getId()) {
			$this->aDistrict = null;
		}
		if ($this->aServiceCoordinator !== null && $this->service_coordinator_id !== $this->aServiceCoordinator->getId()) {
			$this->aServiceCoordinator = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ClientPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCounty = null;
			$this->aDistrict = null;
			$this->aServiceCoordinator = null;
			$this->collClientServices = null;
			$this->lastClientServiceCriteria = null;

			$this->collNoteEntrys = null;
			$this->lastNoteEntryCriteria = null;

			$this->collNoteEntryKidss = null;
			$this->lastNoteEntryKidsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClient:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ClientPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseClient:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClient:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(ClientPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(ClientPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseClient:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ClientPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCounty !== null) {
				if ($this->aCounty->isModified() || $this->aCounty->isNew()) {
					$affectedRows += $this->aCounty->save($con);
				}
				$this->setCounty($this->aCounty);
			}

			if ($this->aDistrict !== null) {
				if ($this->aDistrict->isModified() || $this->aDistrict->isNew()) {
					$affectedRows += $this->aDistrict->save($con);
				}
				$this->setDistrict($this->aDistrict);
			}

			if ($this->aServiceCoordinator !== null) {
				if ($this->aServiceCoordinator->isModified() || $this->aServiceCoordinator->isNew()) {
					$affectedRows += $this->aServiceCoordinator->save($con);
				}
				$this->setServiceCoordinator($this->aServiceCoordinator);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ClientPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ClientPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ClientPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collClientServices !== null) {
				foreach ($this->collClientServices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNoteEntrys !== null) {
				foreach ($this->collNoteEntrys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNoteEntryKidss !== null) {
				foreach ($this->collNoteEntryKidss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCounty !== null) {
				if (!$this->aCounty->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCounty->getValidationFailures());
				}
			}

			if ($this->aDistrict !== null) {
				if (!$this->aDistrict->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDistrict->getValidationFailures());
				}
			}

			if ($this->aServiceCoordinator !== null) {
				if (!$this->aServiceCoordinator->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aServiceCoordinator->getValidationFailures());
				}
			}


			if (($retval = ClientPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collClientServices !== null) {
					foreach ($this->collClientServices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNoteEntrys !== null) {
					foreach ($this->collNoteEntrys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNoteEntryKidss !== null) {
					foreach ($this->collNoteEntryKidss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ClientPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getDob();
				break;
			case 4:
				return $this->getParentFirst();
				break;
			case 5:
				return $this->getParentLast();
				break;
			case 6:
				return $this->getParent2First();
				break;
			case 7:
				return $this->getParent2Last();
				break;
			case 8:
				return $this->getAddress();
				break;
			case 9:
				return $this->getAddress2();
				break;
			case 10:
				return $this->getCity();
				break;
			case 11:
				return $this->getState();
				break;
			case 12:
				return $this->getZip();
				break;
			case 13:
				return $this->getCountyId();
				break;
			case 14:
				return $this->getDistrictId();
				break;
			case 15:
				return $this->getHomePhone();
				break;
			case 16:
				return $this->getWorkPhone();
				break;
			case 17:
				return $this->getCellPhone();
				break;
			case 18:
				return $this->getBlueCard();
				break;
			case 19:
				return $this->getImmunizations();
				break;
			case 20:
				return $this->getWaitingList();
				break;
			case 21:
				return $this->getIsIep();
				break;
			case 22:
				return $this->getPhysicalExp();
				break;
			case 23:
				return $this->getPediatrician();
				break;
			case 24:
				return $this->getNotes();
				break;
			case 25:
				return $this->getServiceCoordinatorId();
				break;
			case 26:
				return $this->getExternalService();
				break;
			case 27:
				return $this->getCreatedAt();
				break;
			case 28:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ClientPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getDob(),
			$keys[4] => $this->getParentFirst(),
			$keys[5] => $this->getParentLast(),
			$keys[6] => $this->getParent2First(),
			$keys[7] => $this->getParent2Last(),
			$keys[8] => $this->getAddress(),
			$keys[9] => $this->getAddress2(),
			$keys[10] => $this->getCity(),
			$keys[11] => $this->getState(),
			$keys[12] => $this->getZip(),
			$keys[13] => $this->getCountyId(),
			$keys[14] => $this->getDistrictId(),
			$keys[15] => $this->getHomePhone(),
			$keys[16] => $this->getWorkPhone(),
			$keys[17] => $this->getCellPhone(),
			$keys[18] => $this->getBlueCard(),
			$keys[19] => $this->getImmunizations(),
			$keys[20] => $this->getWaitingList(),
			$keys[21] => $this->getIsIep(),
			$keys[22] => $this->getPhysicalExp(),
			$keys[23] => $this->getPediatrician(),
			$keys[24] => $this->getNotes(),
			$keys[25] => $this->getServiceCoordinatorId(),
			$keys[26] => $this->getExternalService(),
			$keys[27] => $this->getCreatedAt(),
			$keys[28] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ClientPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setDob($value);
				break;
			case 4:
				$this->setParentFirst($value);
				break;
			case 5:
				$this->setParentLast($value);
				break;
			case 6:
				$this->setParent2First($value);
				break;
			case 7:
				$this->setParent2Last($value);
				break;
			case 8:
				$this->setAddress($value);
				break;
			case 9:
				$this->setAddress2($value);
				break;
			case 10:
				$this->setCity($value);
				break;
			case 11:
				$this->setState($value);
				break;
			case 12:
				$this->setZip($value);
				break;
			case 13:
				$this->setCountyId($value);
				break;
			case 14:
				$this->setDistrictId($value);
				break;
			case 15:
				$this->setHomePhone($value);
				break;
			case 16:
				$this->setWorkPhone($value);
				break;
			case 17:
				$this->setCellPhone($value);
				break;
			case 18:
				$this->setBlueCard($value);
				break;
			case 19:
				$this->setImmunizations($value);
				break;
			case 20:
				$this->setWaitingList($value);
				break;
			case 21:
				$this->setIsIep($value);
				break;
			case 22:
				$this->setPhysicalExp($value);
				break;
			case 23:
				$this->setPediatrician($value);
				break;
			case 24:
				$this->setNotes($value);
				break;
			case 25:
				$this->setServiceCoordinatorId($value);
				break;
			case 26:
				$this->setExternalService($value);
				break;
			case 27:
				$this->setCreatedAt($value);
				break;
			case 28:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ClientPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDob($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setParentFirst($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setParentLast($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setParent2First($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setParent2Last($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAddress($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAddress2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCity($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setState($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setZip($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCountyId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDistrictId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setHomePhone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setWorkPhone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCellPhone($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setBlueCard($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setImmunizations($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setWaitingList($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setIsIep($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setPhysicalExp($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPediatrician($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setNotes($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setServiceCoordinatorId($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setExternalService($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCreatedAt($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setUpdatedAt($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ClientPeer::DATABASE_NAME);

		if ($this->isColumnModified(ClientPeer::ID)) $criteria->add(ClientPeer::ID, $this->id);
		if ($this->isColumnModified(ClientPeer::FIRST_NAME)) $criteria->add(ClientPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(ClientPeer::LAST_NAME)) $criteria->add(ClientPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(ClientPeer::DOB)) $criteria->add(ClientPeer::DOB, $this->dob);
		if ($this->isColumnModified(ClientPeer::PARENT_FIRST)) $criteria->add(ClientPeer::PARENT_FIRST, $this->parent_first);
		if ($this->isColumnModified(ClientPeer::PARENT_LAST)) $criteria->add(ClientPeer::PARENT_LAST, $this->parent_last);
		if ($this->isColumnModified(ClientPeer::PARENT2_FIRST)) $criteria->add(ClientPeer::PARENT2_FIRST, $this->parent2_first);
		if ($this->isColumnModified(ClientPeer::PARENT2_LAST)) $criteria->add(ClientPeer::PARENT2_LAST, $this->parent2_last);
		if ($this->isColumnModified(ClientPeer::ADDRESS)) $criteria->add(ClientPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(ClientPeer::ADDRESS_2)) $criteria->add(ClientPeer::ADDRESS_2, $this->address_2);
		if ($this->isColumnModified(ClientPeer::CITY)) $criteria->add(ClientPeer::CITY, $this->city);
		if ($this->isColumnModified(ClientPeer::STATE)) $criteria->add(ClientPeer::STATE, $this->state);
		if ($this->isColumnModified(ClientPeer::ZIP)) $criteria->add(ClientPeer::ZIP, $this->zip);
		if ($this->isColumnModified(ClientPeer::COUNTY_ID)) $criteria->add(ClientPeer::COUNTY_ID, $this->county_id);
		if ($this->isColumnModified(ClientPeer::DISTRICT_ID)) $criteria->add(ClientPeer::DISTRICT_ID, $this->district_id);
		if ($this->isColumnModified(ClientPeer::HOME_PHONE)) $criteria->add(ClientPeer::HOME_PHONE, $this->home_phone);
		if ($this->isColumnModified(ClientPeer::WORK_PHONE)) $criteria->add(ClientPeer::WORK_PHONE, $this->work_phone);
		if ($this->isColumnModified(ClientPeer::CELL_PHONE)) $criteria->add(ClientPeer::CELL_PHONE, $this->cell_phone);
		if ($this->isColumnModified(ClientPeer::BLUE_CARD)) $criteria->add(ClientPeer::BLUE_CARD, $this->blue_card);
		if ($this->isColumnModified(ClientPeer::IMMUNIZATIONS)) $criteria->add(ClientPeer::IMMUNIZATIONS, $this->immunizations);
		if ($this->isColumnModified(ClientPeer::WAITING_LIST)) $criteria->add(ClientPeer::WAITING_LIST, $this->waiting_list);
		if ($this->isColumnModified(ClientPeer::IS_IEP)) $criteria->add(ClientPeer::IS_IEP, $this->is_iep);
		if ($this->isColumnModified(ClientPeer::PHYSICAL_EXP)) $criteria->add(ClientPeer::PHYSICAL_EXP, $this->physical_exp);
		if ($this->isColumnModified(ClientPeer::PEDIATRICIAN)) $criteria->add(ClientPeer::PEDIATRICIAN, $this->pediatrician);
		if ($this->isColumnModified(ClientPeer::NOTES)) $criteria->add(ClientPeer::NOTES, $this->notes);
		if ($this->isColumnModified(ClientPeer::SERVICE_COORDINATOR_ID)) $criteria->add(ClientPeer::SERVICE_COORDINATOR_ID, $this->service_coordinator_id);
		if ($this->isColumnModified(ClientPeer::EXTERNAL_SERVICE)) $criteria->add(ClientPeer::EXTERNAL_SERVICE, $this->external_service);
		if ($this->isColumnModified(ClientPeer::CREATED_AT)) $criteria->add(ClientPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ClientPeer::UPDATED_AT)) $criteria->add(ClientPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ClientPeer::DATABASE_NAME);

		$criteria->add(ClientPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Client (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setDob($this->dob);

		$copyObj->setParentFirst($this->parent_first);

		$copyObj->setParentLast($this->parent_last);

		$copyObj->setParent2First($this->parent2_first);

		$copyObj->setParent2Last($this->parent2_last);

		$copyObj->setAddress($this->address);

		$copyObj->setAddress2($this->address_2);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZip($this->zip);

		$copyObj->setCountyId($this->county_id);

		$copyObj->setDistrictId($this->district_id);

		$copyObj->setHomePhone($this->home_phone);

		$copyObj->setWorkPhone($this->work_phone);

		$copyObj->setCellPhone($this->cell_phone);

		$copyObj->setBlueCard($this->blue_card);

		$copyObj->setImmunizations($this->immunizations);

		$copyObj->setWaitingList($this->waiting_list);

		$copyObj->setIsIep($this->is_iep);

		$copyObj->setPhysicalExp($this->physical_exp);

		$copyObj->setPediatrician($this->pediatrician);

		$copyObj->setNotes($this->notes);

		$copyObj->setServiceCoordinatorId($this->service_coordinator_id);

		$copyObj->setExternalService($this->external_service);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getClientServices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addClientService($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNoteEntrys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNoteEntry($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNoteEntryKidss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNoteEntryKids($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Client Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ClientPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ClientPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a County object.
	 *
	 * @param      County $v
	 * @return     Client The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCounty(County $v = null)
	{
		if ($v === null) {
			$this->setCountyId(NULL);
		} else {
			$this->setCountyId($v->getId());
		}

		$this->aCounty = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the County object, it will not be re-added.
		if ($v !== null) {
			$v->addClient($this);
		}

		return $this;
	}


	/**
	 * Get the associated County object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     County The associated County object.
	 * @throws     PropelException
	 */
	public function getCounty(PropelPDO $con = null)
	{
		if ($this->aCounty === null && ($this->county_id !== null)) {
			$c = new Criteria(CountyPeer::DATABASE_NAME);
			$c->add(CountyPeer::ID, $this->county_id);
			$this->aCounty = CountyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCounty->addClients($this);
			 */
		}
		return $this->aCounty;
	}

	/**
	 * Declares an association between this object and a District object.
	 *
	 * @param      District $v
	 * @return     Client The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDistrict(District $v = null)
	{
		if ($v === null) {
			$this->setDistrictId(NULL);
		} else {
			$this->setDistrictId($v->getId());
		}

		$this->aDistrict = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the District object, it will not be re-added.
		if ($v !== null) {
			$v->addClient($this);
		}

		return $this;
	}


	/**
	 * Get the associated District object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     District The associated District object.
	 * @throws     PropelException
	 */
	public function getDistrict(PropelPDO $con = null)
	{
		if ($this->aDistrict === null && ($this->district_id !== null)) {
			$c = new Criteria(DistrictPeer::DATABASE_NAME);
			$c->add(DistrictPeer::ID, $this->district_id);
			$this->aDistrict = DistrictPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDistrict->addClients($this);
			 */
		}
		return $this->aDistrict;
	}

	/**
	 * Declares an association between this object and a ServiceCoordinator object.
	 *
	 * @param      ServiceCoordinator $v
	 * @return     Client The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setServiceCoordinator(ServiceCoordinator $v = null)
	{
		if ($v === null) {
			$this->setServiceCoordinatorId(NULL);
		} else {
			$this->setServiceCoordinatorId($v->getId());
		}

		$this->aServiceCoordinator = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ServiceCoordinator object, it will not be re-added.
		if ($v !== null) {
			$v->addClient($this);
		}

		return $this;
	}


	/**
	 * Get the associated ServiceCoordinator object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ServiceCoordinator The associated ServiceCoordinator object.
	 * @throws     PropelException
	 */
	public function getServiceCoordinator(PropelPDO $con = null)
	{
		if ($this->aServiceCoordinator === null && ($this->service_coordinator_id !== null)) {
			$c = new Criteria(ServiceCoordinatorPeer::DATABASE_NAME);
			$c->add(ServiceCoordinatorPeer::ID, $this->service_coordinator_id);
			$this->aServiceCoordinator = ServiceCoordinatorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aServiceCoordinator->addClients($this);
			 */
		}
		return $this->aServiceCoordinator;
	}

	/**
	 * Clears out the collClientServices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addClientServices()
	 */
	public function clearClientServices()
	{
		$this->collClientServices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collClientServices collection (array).
	 *
	 * By default this just sets the collClientServices collection to an empty array (like clearcollClientServices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initClientServices()
	{
		$this->collClientServices = array();
	}

	/**
	 * Gets an array of ClientService objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Client has previously been saved, it will retrieve
	 * related ClientServices from storage. If this Client is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ClientService[]
	 * @throws     PropelException
	 */
	public function getClientServices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
			   $this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				ClientServicePeer::addSelectColumns($criteria);
				$this->collClientServices = ClientServicePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				ClientServicePeer::addSelectColumns($criteria);
				if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
					$this->collClientServices = ClientServicePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastClientServiceCriteria = $criteria;
		return $this->collClientServices;
	}

	/**
	 * Returns the number of related ClientService objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ClientService objects.
	 * @throws     PropelException
	 */
	public function countClientServices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$count = ClientServicePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
					$count = ClientServicePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collClientServices);
				}
			} else {
				$count = count($this->collClientServices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ClientService object to this object
	 * through the ClientService foreign key attribute.
	 *
	 * @param      ClientService $l ClientService
	 * @return     void
	 * @throws     PropelException
	 */
	public function addClientService(ClientService $l)
	{
		if ($this->collClientServices === null) {
			$this->initClientServices();
		}
		if (!in_array($l, $this->collClientServices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collClientServices, $l);
			$l->setClient($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getClientServicesJoinEmployee($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getClientServicesJoinService($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinService($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinService($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getClientServicesJoinFrequency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getClientServicesJoinIcd9($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinIcd9($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinIcd9($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getClientServicesJoinOffice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::CLIENT_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}

	/**
	 * Clears out the collNoteEntrys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNoteEntrys()
	 */
	public function clearNoteEntrys()
	{
		$this->collNoteEntrys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNoteEntrys collection (array).
	 *
	 * By default this just sets the collNoteEntrys collection to an empty array (like clearcollNoteEntrys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNoteEntrys()
	{
		$this->collNoteEntrys = array();
	}

	/**
	 * Gets an array of NoteEntry objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Client has previously been saved, it will retrieve
	 * related NoteEntrys from storage. If this Client is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NoteEntry[]
	 * @throws     PropelException
	 */
	public function getNoteEntrys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
			   $this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNoteEntryCriteria = $criteria;
		return $this->collNoteEntrys;
	}

	/**
	 * Returns the number of related NoteEntry objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NoteEntry objects.
	 * @throws     PropelException
	 */
	public function countNoteEntrys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				$count = NoteEntryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$count = NoteEntryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNoteEntrys);
				}
			} else {
				$count = count($this->collNoteEntrys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NoteEntry object to this object
	 * through the NoteEntry foreign key attribute.
	 *
	 * @param      NoteEntry $l NoteEntry
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNoteEntry(NoteEntry $l)
	{
		if ($this->collNoteEntrys === null) {
			$this->initNoteEntrys();
		}
		if (!in_array($l, $this->collNoteEntrys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNoteEntrys, $l);
			$l->setClient($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getNoteEntrysJoinEmployee($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getNoteEntrysJoinClientService($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClientService($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClientService($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getNoteEntrysJoinOffice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getNoteEntrysJoinFrequency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}

	/**
	 * Clears out the collNoteEntryKidss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNoteEntryKidss()
	 */
	public function clearNoteEntryKidss()
	{
		$this->collNoteEntryKidss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNoteEntryKidss collection (array).
	 *
	 * By default this just sets the collNoteEntryKidss collection to an empty array (like clearcollNoteEntryKidss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNoteEntryKidss()
	{
		$this->collNoteEntryKidss = array();
	}

	/**
	 * Gets an array of NoteEntryKids objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Client has previously been saved, it will retrieve
	 * related NoteEntryKidss from storage. If this Client is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NoteEntryKids[]
	 * @throws     PropelException
	 */
	public function getNoteEntryKidss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntryKidss === null) {
			if ($this->isNew()) {
			   $this->collNoteEntryKidss = array();
			} else {

				$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

				NoteEntryKidsPeer::addSelectColumns($criteria);
				$this->collNoteEntryKidss = NoteEntryKidsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

				NoteEntryKidsPeer::addSelectColumns($criteria);
				if (!isset($this->lastNoteEntryKidsCriteria) || !$this->lastNoteEntryKidsCriteria->equals($criteria)) {
					$this->collNoteEntryKidss = NoteEntryKidsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNoteEntryKidsCriteria = $criteria;
		return $this->collNoteEntryKidss;
	}

	/**
	 * Returns the number of related NoteEntryKids objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NoteEntryKids objects.
	 * @throws     PropelException
	 */
	public function countNoteEntryKidss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNoteEntryKidss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

				$count = NoteEntryKidsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

				if (!isset($this->lastNoteEntryKidsCriteria) || !$this->lastNoteEntryKidsCriteria->equals($criteria)) {
					$count = NoteEntryKidsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNoteEntryKidss);
				}
			} else {
				$count = count($this->collNoteEntryKidss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NoteEntryKids object to this object
	 * through the NoteEntryKids foreign key attribute.
	 *
	 * @param      NoteEntryKids $l NoteEntryKids
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNoteEntryKids(NoteEntryKids $l)
	{
		if ($this->collNoteEntryKidss === null) {
			$this->initNoteEntryKidss();
		}
		if (!in_array($l, $this->collNoteEntryKidss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNoteEntryKidss, $l);
			$l->setClient($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Client is new, it will return
	 * an empty collection; or if this Client has previously
	 * been saved, it will retrieve related NoteEntryKidss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Client.
	 */
	public function getNoteEntryKidssJoinNoteEntry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntryKidss === null) {
			if ($this->isNew()) {
				$this->collNoteEntryKidss = array();
			} else {

				$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

				$this->collNoteEntryKidss = NoteEntryKidsPeer::doSelectJoinNoteEntry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryKidsPeer::CLIENT_ID, $this->id);

			if (!isset($this->lastNoteEntryKidsCriteria) || !$this->lastNoteEntryKidsCriteria->equals($criteria)) {
				$this->collNoteEntryKidss = NoteEntryKidsPeer::doSelectJoinNoteEntry($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryKidsCriteria = $criteria;

		return $this->collNoteEntryKidss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collClientServices) {
				foreach ((array) $this->collClientServices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNoteEntrys) {
				foreach ((array) $this->collNoteEntrys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNoteEntryKidss) {
				foreach ((array) $this->collNoteEntryKidss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collClientServices = null;
		$this->collNoteEntrys = null;
		$this->collNoteEntryKidss = null;
			$this->aCounty = null;
			$this->aDistrict = null;
			$this->aServiceCoordinator = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseClient:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseClient::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseClient
