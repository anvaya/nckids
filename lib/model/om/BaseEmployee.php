<?php

/**
 * Base class that represents a row from the 'employee' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Mar 29 20:17:55 2011
 *
 * @package    lib.model.om
 */
abstract class BaseEmployee extends BaseObject  implements Persistent {


  const PEER = 'EmployeePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmployeePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the middle field.
	 * @var        string
	 */
	protected $middle;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the address_2 field.
	 * @var        string
	 */
	protected $address_2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zip field.
	 * @var        string
	 */
	protected $zip;

	/**
	 * The value for the county field.
	 * @var        string
	 */
	protected $county;

	/**
	 * The value for the home_phone field.
	 * @var        string
	 */
	protected $home_phone;

	/**
	 * The value for the cell_phone field.
	 * @var        string
	 */
	protected $cell_phone;

	/**
	 * The value for the company_email field.
	 * @var        string
	 */
	protected $company_email;

	/**
	 * The value for the personal_email field.
	 * @var        string
	 */
	protected $personal_email;

	/**
	 * The value for the license_number field.
	 * @var        string
	 */
	protected $license_number;

	/**
	 * The value for the license_expiration field.
	 * @var        string
	 */
	protected $license_expiration;

	/**
	 * The value for the dob field.
	 * @var        string
	 */
	protected $dob;

	/**
	 * The value for the doh field.
	 * @var        string
	 */
	protected $doh;

	/**
	 * The value for the dof field.
	 * @var        string
	 */
	protected $dof;

	/**
	 * The value for the job_id field.
	 * @var        int
	 */
	protected $job_id;

	/**
	 * The value for the ssn field.
	 * @var        string
	 */
	protected $ssn;

	/**
	 * The value for the health_insurance field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $health_insurance;

	/**
	 * The value for the retirement_plan field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $retirement_plan;

	/**
	 * The value for the suplimental_health field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $suplimental_health;

	/**
	 * The value for the supplemental_health_notes field.
	 * @var        string
	 */
	protected $supplemental_health_notes;

	/**
	 * The value for the health_type field.
	 * @var        string
	 */
	protected $health_type;

	/**
	 * The value for the physical_date field.
	 * @var        string
	 */
	protected $physical_date;

	/**
	 * The value for the physical_notes field.
	 * @var        string
	 */
	protected $physical_notes;

	/**
	 * The value for the tb_date field.
	 * @var        string
	 */
	protected $tb_date;

	/**
	 * The value for the tb_notes field.
	 * @var        string
	 */
	protected $tb_notes;

	/**
	 * The value for the osha_date field.
	 * @var        string
	 */
	protected $osha_date;

	/**
	 * The value for the cpr_date field.
	 * @var        string
	 */
	protected $cpr_date;

	/**
	 * The value for the finger_prints field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $finger_prints;

	/**
	 * The value for the finger_print_notes field.
	 * @var        string
	 */
	protected $finger_print_notes;

	/**
	 * The value for the clearance field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $clearance;

	/**
	 * The value for the clearance_notes field.
	 * @var        string
	 */
	protected $clearance_notes;

	/**
	 * The value for the picture field.
	 * @var        string
	 */
	protected $picture;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the npi field.
	 * @var        string
	 */
	protected $npi;

	/**
	 * The value for the tc_type field.
	 * @var        string
	 */
	protected $tc_type;

	/**
	 * The value for the tc_effective field.
	 * @var        string
	 */
	protected $tc_effective;

	/**
	 * The value for the tc_number field.
	 * @var        string
	 */
	protected $tc_number;

	/**
	 * The value for the tc_exp field.
	 * @var        string
	 */
	protected $tc_exp;

	/**
	 * The value for the has_keys field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $has_keys;

	/**
	 * The value for the keys_returned field.
	 * @var        string
	 */
	protected $keys_returned;

	/**
	 * The value for the has_email field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $has_email;

	/**
	 * The value for the email_removed field.
	 * @var        string
	 */
	protected $email_removed;

	/**
	 * The value for the has_dist_list field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $has_dist_list;

	/**
	 * The value for the dist_list_removed field.
	 * @var        string
	 */
	protected $dist_list_removed;

	/**
	 * The value for the has_server_access field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $has_server_access;

	/**
	 * The value for the server_removed field.
	 * @var        string
	 */
	protected $server_removed;

	/**
	 * The value for the is_team_member field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_team_member;

	/**
	 * @var        Job
	 */
	protected $aJob;

	/**
	 * @var        array sfGuardUserProfile[] Collection to store aggregation of sfGuardUserProfile objects.
	 */
	protected $collsfGuardUserProfiles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserProfiles.
	 */
	private $lastsfGuardUserProfileCriteria = null;

	/**
	 * @var        array EmployeeFingerToLocation[] Collection to store aggregation of EmployeeFingerToLocation objects.
	 */
	protected $collEmployeeFingerToLocations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmployeeFingerToLocations.
	 */
	private $lastEmployeeFingerToLocationCriteria = null;

	/**
	 * @var        array EmployeeToLocation[] Collection to store aggregation of EmployeeToLocation objects.
	 */
	protected $collEmployeeToLocations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmployeeToLocations.
	 */
	private $lastEmployeeToLocationCriteria = null;

	/**
	 * @var        Physical one-to-one related Physical object
	 */
	protected $singlePhysical;

	/**
	 * @var        array ClientService[] Collection to store aggregation of ClientService objects.
	 */
	protected $collClientServices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collClientServices.
	 */
	private $lastClientServiceCriteria = null;

	/**
	 * @var        array NoteEntry[] Collection to store aggregation of NoteEntry objects.
	 */
	protected $collNoteEntrys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNoteEntrys.
	 */
	private $lastNoteEntryCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmployee object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->health_insurance = false;
		$this->retirement_plan = false;
		$this->suplimental_health = false;
		$this->finger_prints = false;
		$this->clearance = false;
		$this->has_keys = false;
		$this->has_email = false;
		$this->has_dist_list = false;
		$this->has_server_access = false;
		$this->is_team_member = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [middle] column value.
	 * 
	 * @return     string
	 */
	public function getMiddle()
	{
		return $this->middle;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [address_2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address_2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zip] column value.
	 * 
	 * @return     string
	 */
	public function getZip()
	{
		return $this->zip;
	}

	/**
	 * Get the [county] column value.
	 * 
	 * @return     string
	 */
	public function getCounty()
	{
		return $this->county;
	}

	/**
	 * Get the [home_phone] column value.
	 * 
	 * @return     string
	 */
	public function getHomePhone()
	{
		return $this->home_phone;
	}

	/**
	 * Get the [cell_phone] column value.
	 * 
	 * @return     string
	 */
	public function getCellPhone()
	{
		return $this->cell_phone;
	}

	/**
	 * Get the [company_email] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyEmail()
	{
		return $this->company_email;
	}

	/**
	 * Get the [personal_email] column value.
	 * 
	 * @return     string
	 */
	public function getPersonalEmail()
	{
		return $this->personal_email;
	}

	/**
	 * Get the [license_number] column value.
	 * 
	 * @return     string
	 */
	public function getLicenseNumber()
	{
		return $this->license_number;
	}

	/**
	 * Get the [optionally formatted] temporal [license_expiration] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLicenseExpiration($format = 'Y-m-d H:i:s')
	{
		if ($this->license_expiration === null) {
			return null;
		}


		if ($this->license_expiration === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->license_expiration);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->license_expiration, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dob] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDob($format = 'Y-m-d H:i:s')
	{
		if ($this->dob === null) {
			return null;
		}


		if ($this->dob === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dob);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dob, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [doh] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDoh($format = 'Y-m-d H:i:s')
	{
		if ($this->doh === null) {
			return null;
		}


		if ($this->doh === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->doh);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->doh, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [dof] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDof($format = 'Y-m-d H:i:s')
	{
		if ($this->dof === null) {
			return null;
		}


		if ($this->dof === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dof);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dof, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [job_id] column value.
	 * 
	 * @return     int
	 */
	public function getJobId()
	{
		return $this->job_id;
	}

	/**
	 * Get the [ssn] column value.
	 * 
	 * @return     string
	 */
	public function getSsn()
	{
		return $this->ssn;
	}

	/**
	 * Get the [health_insurance] column value.
	 * 
	 * @return     boolean
	 */
	public function getHealthInsurance()
	{
		return $this->health_insurance;
	}

	/**
	 * Get the [retirement_plan] column value.
	 * 
	 * @return     boolean
	 */
	public function getRetirementPlan()
	{
		return $this->retirement_plan;
	}

	/**
	 * Get the [suplimental_health] column value.
	 * 
	 * @return     boolean
	 */
	public function getSuplimentalHealth()
	{
		return $this->suplimental_health;
	}

	/**
	 * Get the [supplemental_health_notes] column value.
	 * 
	 * @return     string
	 */
	public function getSupplementalHealthNotes()
	{
		return $this->supplemental_health_notes;
	}

	/**
	 * Get the [health_type] column value.
	 * 
	 * @return     string
	 */
	public function getHealthType()
	{
		return $this->health_type;
	}

	/**
	 * Get the [optionally formatted] temporal [physical_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPhysicalDate($format = 'Y-m-d H:i:s')
	{
		if ($this->physical_date === null) {
			return null;
		}


		if ($this->physical_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->physical_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->physical_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [physical_notes] column value.
	 * 
	 * @return     string
	 */
	public function getPhysicalNotes()
	{
		return $this->physical_notes;
	}

	/**
	 * Get the [optionally formatted] temporal [tb_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTbDate($format = 'Y-m-d H:i:s')
	{
		if ($this->tb_date === null) {
			return null;
		}


		if ($this->tb_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->tb_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tb_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [tb_notes] column value.
	 * 
	 * @return     string
	 */
	public function getTbNotes()
	{
		return $this->tb_notes;
	}

	/**
	 * Get the [optionally formatted] temporal [osha_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getOshaDate($format = 'Y-m-d H:i:s')
	{
		if ($this->osha_date === null) {
			return null;
		}


		if ($this->osha_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->osha_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->osha_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [cpr_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCprDate($format = 'Y-m-d H:i:s')
	{
		if ($this->cpr_date === null) {
			return null;
		}


		if ($this->cpr_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->cpr_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->cpr_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [finger_prints] column value.
	 * 
	 * @return     boolean
	 */
	public function getFingerPrints()
	{
		return $this->finger_prints;
	}

	/**
	 * Get the [finger_print_notes] column value.
	 * 
	 * @return     string
	 */
	public function getFingerPrintNotes()
	{
		return $this->finger_print_notes;
	}

	/**
	 * Get the [clearance] column value.
	 * 
	 * @return     boolean
	 */
	public function getClearance()
	{
		return $this->clearance;
	}

	/**
	 * Get the [clearance_notes] column value.
	 * 
	 * @return     string
	 */
	public function getClearanceNotes()
	{
		return $this->clearance_notes;
	}

	/**
	 * Get the [picture] column value.
	 * 
	 * @return     string
	 */
	public function getPicture()
	{
		return $this->picture;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [npi] column value.
	 * 
	 * @return     string
	 */
	public function getNpi()
	{
		return $this->npi;
	}

	/**
	 * Get the [tc_type] column value.
	 * 
	 * @return     string
	 */
	public function getTcType()
	{
		return $this->tc_type;
	}

	/**
	 * Get the [optionally formatted] temporal [tc_effective] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTcEffective($format = 'Y-m-d H:i:s')
	{
		if ($this->tc_effective === null) {
			return null;
		}


		if ($this->tc_effective === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->tc_effective);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tc_effective, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [tc_number] column value.
	 * 
	 * @return     string
	 */
	public function getTcNumber()
	{
		return $this->tc_number;
	}

	/**
	 * Get the [optionally formatted] temporal [tc_exp] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTcExp($format = 'Y-m-d H:i:s')
	{
		if ($this->tc_exp === null) {
			return null;
		}


		if ($this->tc_exp === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->tc_exp);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tc_exp, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [has_keys] column value.
	 * 
	 * @return     boolean
	 */
	public function getHasKeys()
	{
		return $this->has_keys;
	}

	/**
	 * Get the [optionally formatted] temporal [keys_returned] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getKeysReturned($format = 'Y-m-d H:i:s')
	{
		if ($this->keys_returned === null) {
			return null;
		}


		if ($this->keys_returned === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->keys_returned);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->keys_returned, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [has_email] column value.
	 * 
	 * @return     boolean
	 */
	public function getHasEmail()
	{
		return $this->has_email;
	}

	/**
	 * Get the [optionally formatted] temporal [email_removed] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEmailRemoved($format = 'Y-m-d H:i:s')
	{
		if ($this->email_removed === null) {
			return null;
		}


		if ($this->email_removed === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->email_removed);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->email_removed, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [has_dist_list] column value.
	 * 
	 * @return     boolean
	 */
	public function getHasDistList()
	{
		return $this->has_dist_list;
	}

	/**
	 * Get the [optionally formatted] temporal [dist_list_removed] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDistListRemoved($format = 'Y-m-d H:i:s')
	{
		if ($this->dist_list_removed === null) {
			return null;
		}


		if ($this->dist_list_removed === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->dist_list_removed);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->dist_list_removed, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [has_server_access] column value.
	 * 
	 * @return     boolean
	 */
	public function getHasServerAccess()
	{
		return $this->has_server_access;
	}

	/**
	 * Get the [optionally formatted] temporal [server_removed] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getServerRemoved($format = 'Y-m-d H:i:s')
	{
		if ($this->server_removed === null) {
			return null;
		}


		if ($this->server_removed === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->server_removed);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->server_removed, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_team_member] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsTeamMember()
	{
		return $this->is_team_member;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EmployeePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = EmployeePeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = EmployeePeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [middle] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setMiddle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middle !== $v) {
			$this->middle = $v;
			$this->modifiedColumns[] = EmployeePeer::MIDDLE;
		}

		return $this;
	} // setMiddle()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = EmployeePeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [address_2] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address_2 !== $v) {
			$this->address_2 = $v;
			$this->modifiedColumns[] = EmployeePeer::ADDRESS_2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = EmployeePeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = EmployeePeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zip] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setZip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zip !== $v) {
			$this->zip = $v;
			$this->modifiedColumns[] = EmployeePeer::ZIP;
		}

		return $this;
	} // setZip()

	/**
	 * Set the value of [county] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCounty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->county !== $v) {
			$this->county = $v;
			$this->modifiedColumns[] = EmployeePeer::COUNTY;
		}

		return $this;
	} // setCounty()

	/**
	 * Set the value of [home_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHomePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_phone !== $v) {
			$this->home_phone = $v;
			$this->modifiedColumns[] = EmployeePeer::HOME_PHONE;
		}

		return $this;
	} // setHomePhone()

	/**
	 * Set the value of [cell_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCellPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cell_phone !== $v) {
			$this->cell_phone = $v;
			$this->modifiedColumns[] = EmployeePeer::CELL_PHONE;
		}

		return $this;
	} // setCellPhone()

	/**
	 * Set the value of [company_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCompanyEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_email !== $v) {
			$this->company_email = $v;
			$this->modifiedColumns[] = EmployeePeer::COMPANY_EMAIL;
		}

		return $this;
	} // setCompanyEmail()

	/**
	 * Set the value of [personal_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setPersonalEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->personal_email !== $v) {
			$this->personal_email = $v;
			$this->modifiedColumns[] = EmployeePeer::PERSONAL_EMAIL;
		}

		return $this;
	} // setPersonalEmail()

	/**
	 * Set the value of [license_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setLicenseNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->license_number !== $v) {
			$this->license_number = $v;
			$this->modifiedColumns[] = EmployeePeer::LICENSE_NUMBER;
		}

		return $this;
	} // setLicenseNumber()

	/**
	 * Sets the value of [license_expiration] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setLicenseExpiration($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->license_expiration !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->license_expiration !== null && $tmpDt = new DateTime($this->license_expiration)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->license_expiration = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::LICENSE_EXPIRATION;
			}
		} // if either are not null

		return $this;
	} // setLicenseExpiration()

	/**
	 * Sets the value of [dob] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDob($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dob !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dob !== null && $tmpDt = new DateTime($this->dob)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dob = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::DOB;
			}
		} // if either are not null

		return $this;
	} // setDob()

	/**
	 * Sets the value of [doh] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDoh($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->doh !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->doh !== null && $tmpDt = new DateTime($this->doh)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->doh = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::DOH;
			}
		} // if either are not null

		return $this;
	} // setDoh()

	/**
	 * Sets the value of [dof] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDof($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dof !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dof !== null && $tmpDt = new DateTime($this->dof)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dof = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::DOF;
			}
		} // if either are not null

		return $this;
	} // setDof()

	/**
	 * Set the value of [job_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setJobId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->job_id !== $v) {
			$this->job_id = $v;
			$this->modifiedColumns[] = EmployeePeer::JOB_ID;
		}

		if ($this->aJob !== null && $this->aJob->getId() !== $v) {
			$this->aJob = null;
		}

		return $this;
	} // setJobId()

	/**
	 * Set the value of [ssn] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setSsn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ssn !== $v) {
			$this->ssn = $v;
			$this->modifiedColumns[] = EmployeePeer::SSN;
		}

		return $this;
	} // setSsn()

	/**
	 * Set the value of [health_insurance] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHealthInsurance($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->health_insurance !== $v || $v === false) {
			$this->health_insurance = $v;
			$this->modifiedColumns[] = EmployeePeer::HEALTH_INSURANCE;
		}

		return $this;
	} // setHealthInsurance()

	/**
	 * Set the value of [retirement_plan] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setRetirementPlan($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->retirement_plan !== $v || $v === false) {
			$this->retirement_plan = $v;
			$this->modifiedColumns[] = EmployeePeer::RETIREMENT_PLAN;
		}

		return $this;
	} // setRetirementPlan()

	/**
	 * Set the value of [suplimental_health] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setSuplimentalHealth($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->suplimental_health !== $v || $v === false) {
			$this->suplimental_health = $v;
			$this->modifiedColumns[] = EmployeePeer::SUPLIMENTAL_HEALTH;
		}

		return $this;
	} // setSuplimentalHealth()

	/**
	 * Set the value of [supplemental_health_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setSupplementalHealthNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->supplemental_health_notes !== $v) {
			$this->supplemental_health_notes = $v;
			$this->modifiedColumns[] = EmployeePeer::SUPPLEMENTAL_HEALTH_NOTES;
		}

		return $this;
	} // setSupplementalHealthNotes()

	/**
	 * Set the value of [health_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHealthType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->health_type !== $v) {
			$this->health_type = $v;
			$this->modifiedColumns[] = EmployeePeer::HEALTH_TYPE;
		}

		return $this;
	} // setHealthType()

	/**
	 * Sets the value of [physical_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setPhysicalDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->physical_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->physical_date !== null && $tmpDt = new DateTime($this->physical_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->physical_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::PHYSICAL_DATE;
			}
		} // if either are not null

		return $this;
	} // setPhysicalDate()

	/**
	 * Set the value of [physical_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setPhysicalNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->physical_notes !== $v) {
			$this->physical_notes = $v;
			$this->modifiedColumns[] = EmployeePeer::PHYSICAL_NOTES;
		}

		return $this;
	} // setPhysicalNotes()

	/**
	 * Sets the value of [tb_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTbDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->tb_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->tb_date !== null && $tmpDt = new DateTime($this->tb_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->tb_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::TB_DATE;
			}
		} // if either are not null

		return $this;
	} // setTbDate()

	/**
	 * Set the value of [tb_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTbNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tb_notes !== $v) {
			$this->tb_notes = $v;
			$this->modifiedColumns[] = EmployeePeer::TB_NOTES;
		}

		return $this;
	} // setTbNotes()

	/**
	 * Sets the value of [osha_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setOshaDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->osha_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->osha_date !== null && $tmpDt = new DateTime($this->osha_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->osha_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::OSHA_DATE;
			}
		} // if either are not null

		return $this;
	} // setOshaDate()

	/**
	 * Sets the value of [cpr_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCprDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->cpr_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->cpr_date !== null && $tmpDt = new DateTime($this->cpr_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->cpr_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::CPR_DATE;
			}
		} // if either are not null

		return $this;
	} // setCprDate()

	/**
	 * Set the value of [finger_prints] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setFingerPrints($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->finger_prints !== $v || $v === false) {
			$this->finger_prints = $v;
			$this->modifiedColumns[] = EmployeePeer::FINGER_PRINTS;
		}

		return $this;
	} // setFingerPrints()

	/**
	 * Set the value of [finger_print_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setFingerPrintNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->finger_print_notes !== $v) {
			$this->finger_print_notes = $v;
			$this->modifiedColumns[] = EmployeePeer::FINGER_PRINT_NOTES;
		}

		return $this;
	} // setFingerPrintNotes()

	/**
	 * Set the value of [clearance] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setClearance($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->clearance !== $v || $v === false) {
			$this->clearance = $v;
			$this->modifiedColumns[] = EmployeePeer::CLEARANCE;
		}

		return $this;
	} // setClearance()

	/**
	 * Set the value of [clearance_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setClearanceNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->clearance_notes !== $v) {
			$this->clearance_notes = $v;
			$this->modifiedColumns[] = EmployeePeer::CLEARANCE_NOTES;
		}

		return $this;
	} // setClearanceNotes()

	/**
	 * Set the value of [picture] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setPicture($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->picture !== $v) {
			$this->picture = $v;
			$this->modifiedColumns[] = EmployeePeer::PICTURE;
		}

		return $this;
	} // setPicture()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = EmployeePeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Set the value of [npi] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setNpi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->npi !== $v) {
			$this->npi = $v;
			$this->modifiedColumns[] = EmployeePeer::NPI;
		}

		return $this;
	} // setNpi()

	/**
	 * Set the value of [tc_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTcType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tc_type !== $v) {
			$this->tc_type = $v;
			$this->modifiedColumns[] = EmployeePeer::TC_TYPE;
		}

		return $this;
	} // setTcType()

	/**
	 * Sets the value of [tc_effective] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTcEffective($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->tc_effective !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->tc_effective !== null && $tmpDt = new DateTime($this->tc_effective)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->tc_effective = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::TC_EFFECTIVE;
			}
		} // if either are not null

		return $this;
	} // setTcEffective()

	/**
	 * Set the value of [tc_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTcNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tc_number !== $v) {
			$this->tc_number = $v;
			$this->modifiedColumns[] = EmployeePeer::TC_NUMBER;
		}

		return $this;
	} // setTcNumber()

	/**
	 * Sets the value of [tc_exp] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setTcExp($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->tc_exp !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->tc_exp !== null && $tmpDt = new DateTime($this->tc_exp)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->tc_exp = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::TC_EXP;
			}
		} // if either are not null

		return $this;
	} // setTcExp()

	/**
	 * Set the value of [has_keys] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHasKeys($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->has_keys !== $v || $v === false) {
			$this->has_keys = $v;
			$this->modifiedColumns[] = EmployeePeer::HAS_KEYS;
		}

		return $this;
	} // setHasKeys()

	/**
	 * Sets the value of [keys_returned] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setKeysReturned($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->keys_returned !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->keys_returned !== null && $tmpDt = new DateTime($this->keys_returned)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->keys_returned = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::KEYS_RETURNED;
			}
		} // if either are not null

		return $this;
	} // setKeysReturned()

	/**
	 * Set the value of [has_email] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHasEmail($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->has_email !== $v || $v === false) {
			$this->has_email = $v;
			$this->modifiedColumns[] = EmployeePeer::HAS_EMAIL;
		}

		return $this;
	} // setHasEmail()

	/**
	 * Sets the value of [email_removed] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setEmailRemoved($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->email_removed !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->email_removed !== null && $tmpDt = new DateTime($this->email_removed)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->email_removed = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::EMAIL_REMOVED;
			}
		} // if either are not null

		return $this;
	} // setEmailRemoved()

	/**
	 * Set the value of [has_dist_list] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHasDistList($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->has_dist_list !== $v || $v === false) {
			$this->has_dist_list = $v;
			$this->modifiedColumns[] = EmployeePeer::HAS_DIST_LIST;
		}

		return $this;
	} // setHasDistList()

	/**
	 * Sets the value of [dist_list_removed] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setDistListRemoved($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->dist_list_removed !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->dist_list_removed !== null && $tmpDt = new DateTime($this->dist_list_removed)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->dist_list_removed = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::DIST_LIST_REMOVED;
			}
		} // if either are not null

		return $this;
	} // setDistListRemoved()

	/**
	 * Set the value of [has_server_access] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setHasServerAccess($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->has_server_access !== $v || $v === false) {
			$this->has_server_access = $v;
			$this->modifiedColumns[] = EmployeePeer::HAS_SERVER_ACCESS;
		}

		return $this;
	} // setHasServerAccess()

	/**
	 * Sets the value of [server_removed] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setServerRemoved($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->server_removed !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->server_removed !== null && $tmpDt = new DateTime($this->server_removed)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->server_removed = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::SERVER_REMOVED;
			}
		} // if either are not null

		return $this;
	} // setServerRemoved()

	/**
	 * Set the value of [is_team_member] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setIsTeamMember($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_team_member !== $v || $v === false) {
			$this->is_team_member = $v;
			$this->modifiedColumns[] = EmployeePeer::IS_TEAM_MEMBER;
		}

		return $this;
	} // setIsTeamMember()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(EmployeePeer::HEALTH_INSURANCE,EmployeePeer::RETIREMENT_PLAN,EmployeePeer::SUPLIMENTAL_HEALTH,EmployeePeer::FINGER_PRINTS,EmployeePeer::CLEARANCE,EmployeePeer::HAS_KEYS,EmployeePeer::HAS_EMAIL,EmployeePeer::HAS_DIST_LIST,EmployeePeer::HAS_SERVER_ACCESS,EmployeePeer::IS_TEAM_MEMBER))) {
				return false;
			}

			if ($this->health_insurance !== false) {
				return false;
			}

			if ($this->retirement_plan !== false) {
				return false;
			}

			if ($this->suplimental_health !== false) {
				return false;
			}

			if ($this->finger_prints !== false) {
				return false;
			}

			if ($this->clearance !== false) {
				return false;
			}

			if ($this->has_keys !== false) {
				return false;
			}

			if ($this->has_email !== false) {
				return false;
			}

			if ($this->has_dist_list !== false) {
				return false;
			}

			if ($this->has_server_access !== false) {
				return false;
			}

			if ($this->is_team_member !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->middle = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->address = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address_2 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->city = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->state = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->zip = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->county = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->home_phone = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cell_phone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->company_email = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->personal_email = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->license_number = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->license_expiration = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->dob = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->doh = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->dof = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->job_id = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->ssn = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->health_insurance = ($row[$startcol + 21] !== null) ? (boolean) $row[$startcol + 21] : null;
			$this->retirement_plan = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->suplimental_health = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->supplemental_health_notes = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->health_type = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->physical_date = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->physical_notes = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->tb_date = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->tb_notes = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->osha_date = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->cpr_date = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->finger_prints = ($row[$startcol + 32] !== null) ? (boolean) $row[$startcol + 32] : null;
			$this->finger_print_notes = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->clearance = ($row[$startcol + 34] !== null) ? (boolean) $row[$startcol + 34] : null;
			$this->clearance_notes = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->picture = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->notes = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->npi = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->tc_type = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->tc_effective = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->tc_number = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->tc_exp = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->has_keys = ($row[$startcol + 43] !== null) ? (boolean) $row[$startcol + 43] : null;
			$this->keys_returned = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->has_email = ($row[$startcol + 45] !== null) ? (boolean) $row[$startcol + 45] : null;
			$this->email_removed = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->has_dist_list = ($row[$startcol + 47] !== null) ? (boolean) $row[$startcol + 47] : null;
			$this->dist_list_removed = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->has_server_access = ($row[$startcol + 49] !== null) ? (boolean) $row[$startcol + 49] : null;
			$this->server_removed = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->is_team_member = ($row[$startcol + 51] !== null) ? (boolean) $row[$startcol + 51] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 52; // 52 = EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Employee object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aJob !== null && $this->job_id !== $this->aJob->getId()) {
			$this->aJob = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmployeePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aJob = null;
			$this->collsfGuardUserProfiles = null;
			$this->lastsfGuardUserProfileCriteria = null;

			$this->collEmployeeFingerToLocations = null;
			$this->lastEmployeeFingerToLocationCriteria = null;

			$this->collEmployeeToLocations = null;
			$this->lastEmployeeToLocationCriteria = null;

			$this->singlePhysical = null;

			$this->collClientServices = null;
			$this->lastClientServiceCriteria = null;

			$this->collNoteEntrys = null;
			$this->lastNoteEntryCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmployeePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmployee:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmployee:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmployeePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJob !== null) {
				if ($this->aJob->isModified() || $this->aJob->isNew()) {
					$affectedRows += $this->aJob->save($con);
				}
				$this->setJob($this->aJob);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmployeePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmployeePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmployeePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collsfGuardUserProfiles !== null) {
				foreach ($this->collsfGuardUserProfiles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmployeeFingerToLocations !== null) {
				foreach ($this->collEmployeeFingerToLocations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmployeeToLocations !== null) {
				foreach ($this->collEmployeeToLocations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singlePhysical !== null) {
				if (!$this->singlePhysical->isDeleted()) {
						$affectedRows += $this->singlePhysical->save($con);
				}
			}

			if ($this->collClientServices !== null) {
				foreach ($this->collClientServices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNoteEntrys !== null) {
				foreach ($this->collNoteEntrys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aJob !== null) {
				if (!$this->aJob->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aJob->getValidationFailures());
				}
			}


			if (($retval = EmployeePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collsfGuardUserProfiles !== null) {
					foreach ($this->collsfGuardUserProfiles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmployeeFingerToLocations !== null) {
					foreach ($this->collEmployeeFingerToLocations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmployeeToLocations !== null) {
					foreach ($this->collEmployeeToLocations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singlePhysical !== null) {
					if (!$this->singlePhysical->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singlePhysical->getValidationFailures());
					}
				}

				if ($this->collClientServices !== null) {
					foreach ($this->collClientServices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNoteEntrys !== null) {
					foreach ($this->collNoteEntrys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getMiddle();
				break;
			case 4:
				return $this->getAddress();
				break;
			case 5:
				return $this->getAddress2();
				break;
			case 6:
				return $this->getCity();
				break;
			case 7:
				return $this->getState();
				break;
			case 8:
				return $this->getZip();
				break;
			case 9:
				return $this->getCounty();
				break;
			case 10:
				return $this->getHomePhone();
				break;
			case 11:
				return $this->getCellPhone();
				break;
			case 12:
				return $this->getCompanyEmail();
				break;
			case 13:
				return $this->getPersonalEmail();
				break;
			case 14:
				return $this->getLicenseNumber();
				break;
			case 15:
				return $this->getLicenseExpiration();
				break;
			case 16:
				return $this->getDob();
				break;
			case 17:
				return $this->getDoh();
				break;
			case 18:
				return $this->getDof();
				break;
			case 19:
				return $this->getJobId();
				break;
			case 20:
				return $this->getSsn();
				break;
			case 21:
				return $this->getHealthInsurance();
				break;
			case 22:
				return $this->getRetirementPlan();
				break;
			case 23:
				return $this->getSuplimentalHealth();
				break;
			case 24:
				return $this->getSupplementalHealthNotes();
				break;
			case 25:
				return $this->getHealthType();
				break;
			case 26:
				return $this->getPhysicalDate();
				break;
			case 27:
				return $this->getPhysicalNotes();
				break;
			case 28:
				return $this->getTbDate();
				break;
			case 29:
				return $this->getTbNotes();
				break;
			case 30:
				return $this->getOshaDate();
				break;
			case 31:
				return $this->getCprDate();
				break;
			case 32:
				return $this->getFingerPrints();
				break;
			case 33:
				return $this->getFingerPrintNotes();
				break;
			case 34:
				return $this->getClearance();
				break;
			case 35:
				return $this->getClearanceNotes();
				break;
			case 36:
				return $this->getPicture();
				break;
			case 37:
				return $this->getNotes();
				break;
			case 38:
				return $this->getNpi();
				break;
			case 39:
				return $this->getTcType();
				break;
			case 40:
				return $this->getTcEffective();
				break;
			case 41:
				return $this->getTcNumber();
				break;
			case 42:
				return $this->getTcExp();
				break;
			case 43:
				return $this->getHasKeys();
				break;
			case 44:
				return $this->getKeysReturned();
				break;
			case 45:
				return $this->getHasEmail();
				break;
			case 46:
				return $this->getEmailRemoved();
				break;
			case 47:
				return $this->getHasDistList();
				break;
			case 48:
				return $this->getDistListRemoved();
				break;
			case 49:
				return $this->getHasServerAccess();
				break;
			case 50:
				return $this->getServerRemoved();
				break;
			case 51:
				return $this->getIsTeamMember();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmployeePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getMiddle(),
			$keys[4] => $this->getAddress(),
			$keys[5] => $this->getAddress2(),
			$keys[6] => $this->getCity(),
			$keys[7] => $this->getState(),
			$keys[8] => $this->getZip(),
			$keys[9] => $this->getCounty(),
			$keys[10] => $this->getHomePhone(),
			$keys[11] => $this->getCellPhone(),
			$keys[12] => $this->getCompanyEmail(),
			$keys[13] => $this->getPersonalEmail(),
			$keys[14] => $this->getLicenseNumber(),
			$keys[15] => $this->getLicenseExpiration(),
			$keys[16] => $this->getDob(),
			$keys[17] => $this->getDoh(),
			$keys[18] => $this->getDof(),
			$keys[19] => $this->getJobId(),
			$keys[20] => $this->getSsn(),
			$keys[21] => $this->getHealthInsurance(),
			$keys[22] => $this->getRetirementPlan(),
			$keys[23] => $this->getSuplimentalHealth(),
			$keys[24] => $this->getSupplementalHealthNotes(),
			$keys[25] => $this->getHealthType(),
			$keys[26] => $this->getPhysicalDate(),
			$keys[27] => $this->getPhysicalNotes(),
			$keys[28] => $this->getTbDate(),
			$keys[29] => $this->getTbNotes(),
			$keys[30] => $this->getOshaDate(),
			$keys[31] => $this->getCprDate(),
			$keys[32] => $this->getFingerPrints(),
			$keys[33] => $this->getFingerPrintNotes(),
			$keys[34] => $this->getClearance(),
			$keys[35] => $this->getClearanceNotes(),
			$keys[36] => $this->getPicture(),
			$keys[37] => $this->getNotes(),
			$keys[38] => $this->getNpi(),
			$keys[39] => $this->getTcType(),
			$keys[40] => $this->getTcEffective(),
			$keys[41] => $this->getTcNumber(),
			$keys[42] => $this->getTcExp(),
			$keys[43] => $this->getHasKeys(),
			$keys[44] => $this->getKeysReturned(),
			$keys[45] => $this->getHasEmail(),
			$keys[46] => $this->getEmailRemoved(),
			$keys[47] => $this->getHasDistList(),
			$keys[48] => $this->getDistListRemoved(),
			$keys[49] => $this->getHasServerAccess(),
			$keys[50] => $this->getServerRemoved(),
			$keys[51] => $this->getIsTeamMember(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setMiddle($value);
				break;
			case 4:
				$this->setAddress($value);
				break;
			case 5:
				$this->setAddress2($value);
				break;
			case 6:
				$this->setCity($value);
				break;
			case 7:
				$this->setState($value);
				break;
			case 8:
				$this->setZip($value);
				break;
			case 9:
				$this->setCounty($value);
				break;
			case 10:
				$this->setHomePhone($value);
				break;
			case 11:
				$this->setCellPhone($value);
				break;
			case 12:
				$this->setCompanyEmail($value);
				break;
			case 13:
				$this->setPersonalEmail($value);
				break;
			case 14:
				$this->setLicenseNumber($value);
				break;
			case 15:
				$this->setLicenseExpiration($value);
				break;
			case 16:
				$this->setDob($value);
				break;
			case 17:
				$this->setDoh($value);
				break;
			case 18:
				$this->setDof($value);
				break;
			case 19:
				$this->setJobId($value);
				break;
			case 20:
				$this->setSsn($value);
				break;
			case 21:
				$this->setHealthInsurance($value);
				break;
			case 22:
				$this->setRetirementPlan($value);
				break;
			case 23:
				$this->setSuplimentalHealth($value);
				break;
			case 24:
				$this->setSupplementalHealthNotes($value);
				break;
			case 25:
				$this->setHealthType($value);
				break;
			case 26:
				$this->setPhysicalDate($value);
				break;
			case 27:
				$this->setPhysicalNotes($value);
				break;
			case 28:
				$this->setTbDate($value);
				break;
			case 29:
				$this->setTbNotes($value);
				break;
			case 30:
				$this->setOshaDate($value);
				break;
			case 31:
				$this->setCprDate($value);
				break;
			case 32:
				$this->setFingerPrints($value);
				break;
			case 33:
				$this->setFingerPrintNotes($value);
				break;
			case 34:
				$this->setClearance($value);
				break;
			case 35:
				$this->setClearanceNotes($value);
				break;
			case 36:
				$this->setPicture($value);
				break;
			case 37:
				$this->setNotes($value);
				break;
			case 38:
				$this->setNpi($value);
				break;
			case 39:
				$this->setTcType($value);
				break;
			case 40:
				$this->setTcEffective($value);
				break;
			case 41:
				$this->setTcNumber($value);
				break;
			case 42:
				$this->setTcExp($value);
				break;
			case 43:
				$this->setHasKeys($value);
				break;
			case 44:
				$this->setKeysReturned($value);
				break;
			case 45:
				$this->setHasEmail($value);
				break;
			case 46:
				$this->setEmailRemoved($value);
				break;
			case 47:
				$this->setHasDistList($value);
				break;
			case 48:
				$this->setDistListRemoved($value);
				break;
			case 49:
				$this->setHasServerAccess($value);
				break;
			case 50:
				$this->setServerRemoved($value);
				break;
			case 51:
				$this->setIsTeamMember($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmployeePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMiddle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress2($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCity($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setState($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setZip($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCounty($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setHomePhone($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCellPhone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCompanyEmail($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPersonalEmail($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setLicenseNumber($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setLicenseExpiration($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDob($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDoh($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDof($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setJobId($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSsn($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setHealthInsurance($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRetirementPlan($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setSuplimentalHealth($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setSupplementalHealthNotes($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setHealthType($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPhysicalDate($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setPhysicalNotes($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setTbDate($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setTbNotes($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setOshaDate($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCprDate($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setFingerPrints($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setFingerPrintNotes($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setClearance($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setClearanceNotes($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setPicture($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setNotes($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setNpi($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setTcType($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setTcEffective($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setTcNumber($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setTcExp($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setHasKeys($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setKeysReturned($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setHasEmail($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setEmailRemoved($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setHasDistList($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setDistListRemoved($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setHasServerAccess($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setServerRemoved($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setIsTeamMember($arr[$keys[51]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		if ($this->isColumnModified(EmployeePeer::ID)) $criteria->add(EmployeePeer::ID, $this->id);
		if ($this->isColumnModified(EmployeePeer::FIRST_NAME)) $criteria->add(EmployeePeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(EmployeePeer::LAST_NAME)) $criteria->add(EmployeePeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(EmployeePeer::MIDDLE)) $criteria->add(EmployeePeer::MIDDLE, $this->middle);
		if ($this->isColumnModified(EmployeePeer::ADDRESS)) $criteria->add(EmployeePeer::ADDRESS, $this->address);
		if ($this->isColumnModified(EmployeePeer::ADDRESS_2)) $criteria->add(EmployeePeer::ADDRESS_2, $this->address_2);
		if ($this->isColumnModified(EmployeePeer::CITY)) $criteria->add(EmployeePeer::CITY, $this->city);
		if ($this->isColumnModified(EmployeePeer::STATE)) $criteria->add(EmployeePeer::STATE, $this->state);
		if ($this->isColumnModified(EmployeePeer::ZIP)) $criteria->add(EmployeePeer::ZIP, $this->zip);
		if ($this->isColumnModified(EmployeePeer::COUNTY)) $criteria->add(EmployeePeer::COUNTY, $this->county);
		if ($this->isColumnModified(EmployeePeer::HOME_PHONE)) $criteria->add(EmployeePeer::HOME_PHONE, $this->home_phone);
		if ($this->isColumnModified(EmployeePeer::CELL_PHONE)) $criteria->add(EmployeePeer::CELL_PHONE, $this->cell_phone);
		if ($this->isColumnModified(EmployeePeer::COMPANY_EMAIL)) $criteria->add(EmployeePeer::COMPANY_EMAIL, $this->company_email);
		if ($this->isColumnModified(EmployeePeer::PERSONAL_EMAIL)) $criteria->add(EmployeePeer::PERSONAL_EMAIL, $this->personal_email);
		if ($this->isColumnModified(EmployeePeer::LICENSE_NUMBER)) $criteria->add(EmployeePeer::LICENSE_NUMBER, $this->license_number);
		if ($this->isColumnModified(EmployeePeer::LICENSE_EXPIRATION)) $criteria->add(EmployeePeer::LICENSE_EXPIRATION, $this->license_expiration);
		if ($this->isColumnModified(EmployeePeer::DOB)) $criteria->add(EmployeePeer::DOB, $this->dob);
		if ($this->isColumnModified(EmployeePeer::DOH)) $criteria->add(EmployeePeer::DOH, $this->doh);
		if ($this->isColumnModified(EmployeePeer::DOF)) $criteria->add(EmployeePeer::DOF, $this->dof);
		if ($this->isColumnModified(EmployeePeer::JOB_ID)) $criteria->add(EmployeePeer::JOB_ID, $this->job_id);
		if ($this->isColumnModified(EmployeePeer::SSN)) $criteria->add(EmployeePeer::SSN, $this->ssn);
		if ($this->isColumnModified(EmployeePeer::HEALTH_INSURANCE)) $criteria->add(EmployeePeer::HEALTH_INSURANCE, $this->health_insurance);
		if ($this->isColumnModified(EmployeePeer::RETIREMENT_PLAN)) $criteria->add(EmployeePeer::RETIREMENT_PLAN, $this->retirement_plan);
		if ($this->isColumnModified(EmployeePeer::SUPLIMENTAL_HEALTH)) $criteria->add(EmployeePeer::SUPLIMENTAL_HEALTH, $this->suplimental_health);
		if ($this->isColumnModified(EmployeePeer::SUPPLEMENTAL_HEALTH_NOTES)) $criteria->add(EmployeePeer::SUPPLEMENTAL_HEALTH_NOTES, $this->supplemental_health_notes);
		if ($this->isColumnModified(EmployeePeer::HEALTH_TYPE)) $criteria->add(EmployeePeer::HEALTH_TYPE, $this->health_type);
		if ($this->isColumnModified(EmployeePeer::PHYSICAL_DATE)) $criteria->add(EmployeePeer::PHYSICAL_DATE, $this->physical_date);
		if ($this->isColumnModified(EmployeePeer::PHYSICAL_NOTES)) $criteria->add(EmployeePeer::PHYSICAL_NOTES, $this->physical_notes);
		if ($this->isColumnModified(EmployeePeer::TB_DATE)) $criteria->add(EmployeePeer::TB_DATE, $this->tb_date);
		if ($this->isColumnModified(EmployeePeer::TB_NOTES)) $criteria->add(EmployeePeer::TB_NOTES, $this->tb_notes);
		if ($this->isColumnModified(EmployeePeer::OSHA_DATE)) $criteria->add(EmployeePeer::OSHA_DATE, $this->osha_date);
		if ($this->isColumnModified(EmployeePeer::CPR_DATE)) $criteria->add(EmployeePeer::CPR_DATE, $this->cpr_date);
		if ($this->isColumnModified(EmployeePeer::FINGER_PRINTS)) $criteria->add(EmployeePeer::FINGER_PRINTS, $this->finger_prints);
		if ($this->isColumnModified(EmployeePeer::FINGER_PRINT_NOTES)) $criteria->add(EmployeePeer::FINGER_PRINT_NOTES, $this->finger_print_notes);
		if ($this->isColumnModified(EmployeePeer::CLEARANCE)) $criteria->add(EmployeePeer::CLEARANCE, $this->clearance);
		if ($this->isColumnModified(EmployeePeer::CLEARANCE_NOTES)) $criteria->add(EmployeePeer::CLEARANCE_NOTES, $this->clearance_notes);
		if ($this->isColumnModified(EmployeePeer::PICTURE)) $criteria->add(EmployeePeer::PICTURE, $this->picture);
		if ($this->isColumnModified(EmployeePeer::NOTES)) $criteria->add(EmployeePeer::NOTES, $this->notes);
		if ($this->isColumnModified(EmployeePeer::NPI)) $criteria->add(EmployeePeer::NPI, $this->npi);
		if ($this->isColumnModified(EmployeePeer::TC_TYPE)) $criteria->add(EmployeePeer::TC_TYPE, $this->tc_type);
		if ($this->isColumnModified(EmployeePeer::TC_EFFECTIVE)) $criteria->add(EmployeePeer::TC_EFFECTIVE, $this->tc_effective);
		if ($this->isColumnModified(EmployeePeer::TC_NUMBER)) $criteria->add(EmployeePeer::TC_NUMBER, $this->tc_number);
		if ($this->isColumnModified(EmployeePeer::TC_EXP)) $criteria->add(EmployeePeer::TC_EXP, $this->tc_exp);
		if ($this->isColumnModified(EmployeePeer::HAS_KEYS)) $criteria->add(EmployeePeer::HAS_KEYS, $this->has_keys);
		if ($this->isColumnModified(EmployeePeer::KEYS_RETURNED)) $criteria->add(EmployeePeer::KEYS_RETURNED, $this->keys_returned);
		if ($this->isColumnModified(EmployeePeer::HAS_EMAIL)) $criteria->add(EmployeePeer::HAS_EMAIL, $this->has_email);
		if ($this->isColumnModified(EmployeePeer::EMAIL_REMOVED)) $criteria->add(EmployeePeer::EMAIL_REMOVED, $this->email_removed);
		if ($this->isColumnModified(EmployeePeer::HAS_DIST_LIST)) $criteria->add(EmployeePeer::HAS_DIST_LIST, $this->has_dist_list);
		if ($this->isColumnModified(EmployeePeer::DIST_LIST_REMOVED)) $criteria->add(EmployeePeer::DIST_LIST_REMOVED, $this->dist_list_removed);
		if ($this->isColumnModified(EmployeePeer::HAS_SERVER_ACCESS)) $criteria->add(EmployeePeer::HAS_SERVER_ACCESS, $this->has_server_access);
		if ($this->isColumnModified(EmployeePeer::SERVER_REMOVED)) $criteria->add(EmployeePeer::SERVER_REMOVED, $this->server_removed);
		if ($this->isColumnModified(EmployeePeer::IS_TEAM_MEMBER)) $criteria->add(EmployeePeer::IS_TEAM_MEMBER, $this->is_team_member);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		$criteria->add(EmployeePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Employee (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setMiddle($this->middle);

		$copyObj->setAddress($this->address);

		$copyObj->setAddress2($this->address_2);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZip($this->zip);

		$copyObj->setCounty($this->county);

		$copyObj->setHomePhone($this->home_phone);

		$copyObj->setCellPhone($this->cell_phone);

		$copyObj->setCompanyEmail($this->company_email);

		$copyObj->setPersonalEmail($this->personal_email);

		$copyObj->setLicenseNumber($this->license_number);

		$copyObj->setLicenseExpiration($this->license_expiration);

		$copyObj->setDob($this->dob);

		$copyObj->setDoh($this->doh);

		$copyObj->setDof($this->dof);

		$copyObj->setJobId($this->job_id);

		$copyObj->setSsn($this->ssn);

		$copyObj->setHealthInsurance($this->health_insurance);

		$copyObj->setRetirementPlan($this->retirement_plan);

		$copyObj->setSuplimentalHealth($this->suplimental_health);

		$copyObj->setSupplementalHealthNotes($this->supplemental_health_notes);

		$copyObj->setHealthType($this->health_type);

		$copyObj->setPhysicalDate($this->physical_date);

		$copyObj->setPhysicalNotes($this->physical_notes);

		$copyObj->setTbDate($this->tb_date);

		$copyObj->setTbNotes($this->tb_notes);

		$copyObj->setOshaDate($this->osha_date);

		$copyObj->setCprDate($this->cpr_date);

		$copyObj->setFingerPrints($this->finger_prints);

		$copyObj->setFingerPrintNotes($this->finger_print_notes);

		$copyObj->setClearance($this->clearance);

		$copyObj->setClearanceNotes($this->clearance_notes);

		$copyObj->setPicture($this->picture);

		$copyObj->setNotes($this->notes);

		$copyObj->setNpi($this->npi);

		$copyObj->setTcType($this->tc_type);

		$copyObj->setTcEffective($this->tc_effective);

		$copyObj->setTcNumber($this->tc_number);

		$copyObj->setTcExp($this->tc_exp);

		$copyObj->setHasKeys($this->has_keys);

		$copyObj->setKeysReturned($this->keys_returned);

		$copyObj->setHasEmail($this->has_email);

		$copyObj->setEmailRemoved($this->email_removed);

		$copyObj->setHasDistList($this->has_dist_list);

		$copyObj->setDistListRemoved($this->dist_list_removed);

		$copyObj->setHasServerAccess($this->has_server_access);

		$copyObj->setServerRemoved($this->server_removed);

		$copyObj->setIsTeamMember($this->is_team_member);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getsfGuardUserProfiles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserProfile($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmployeeFingerToLocations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmployeeFingerToLocation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmployeeToLocations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmployeeToLocation($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getPhysical();
			if ($relObj) {
				$copyObj->setPhysical($relObj->copy($deepCopy));
			}

			foreach ($this->getClientServices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addClientService($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNoteEntrys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNoteEntry($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Employee Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmployeePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmployeePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Job object.
	 *
	 * @param      Job $v
	 * @return     Employee The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setJob(Job $v = null)
	{
		if ($v === null) {
			$this->setJobId(NULL);
		} else {
			$this->setJobId($v->getId());
		}

		$this->aJob = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Job object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployee($this);
		}

		return $this;
	}


	/**
	 * Get the associated Job object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Job The associated Job object.
	 * @throws     PropelException
	 */
	public function getJob(PropelPDO $con = null)
	{
		if ($this->aJob === null && ($this->job_id !== null)) {
			$c = new Criteria(JobPeer::DATABASE_NAME);
			$c->add(JobPeer::ID, $this->job_id);
			$this->aJob = JobPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aJob->addEmployees($this);
			 */
		}
		return $this->aJob;
	}

	/**
	 * Clears out the collsfGuardUserProfiles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserProfiles()
	 */
	public function clearsfGuardUserProfiles()
	{
		$this->collsfGuardUserProfiles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserProfiles collection (array).
	 *
	 * By default this just sets the collsfGuardUserProfiles collection to an empty array (like clearcollsfGuardUserProfiles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserProfiles()
	{
		$this->collsfGuardUserProfiles = array();
	}

	/**
	 * Gets an array of sfGuardUserProfile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related sfGuardUserProfiles from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserProfile[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserProfiles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserProfiles === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserProfiles = array();
			} else {

				$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

				sfGuardUserProfilePeer::addSelectColumns($criteria);
				$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

				sfGuardUserProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserProfileCriteria) || !$this->lastsfGuardUserProfileCriteria->equals($criteria)) {
					$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserProfileCriteria = $criteria;
		return $this->collsfGuardUserProfiles;
	}

	/**
	 * Returns the number of related sfGuardUserProfile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserProfile objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserProfiles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserProfiles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

				$count = sfGuardUserProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastsfGuardUserProfileCriteria) || !$this->lastsfGuardUserProfileCriteria->equals($criteria)) {
					$count = sfGuardUserProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collsfGuardUserProfiles);
				}
			} else {
				$count = count($this->collsfGuardUserProfiles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserProfile object to this object
	 * through the sfGuardUserProfile foreign key attribute.
	 *
	 * @param      sfGuardUserProfile $l sfGuardUserProfile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserProfile(sfGuardUserProfile $l)
	{
		if ($this->collsfGuardUserProfiles === null) {
			$this->initsfGuardUserProfiles();
		}
		if (!in_array($l, $this->collsfGuardUserProfiles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserProfiles, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related sfGuardUserProfiles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getsfGuardUserProfilesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserProfiles === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserProfiles = array();
			} else {

				$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

				$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserProfilePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastsfGuardUserProfileCriteria) || !$this->lastsfGuardUserProfileCriteria->equals($criteria)) {
				$this->collsfGuardUserProfiles = sfGuardUserProfilePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserProfileCriteria = $criteria;

		return $this->collsfGuardUserProfiles;
	}

	/**
	 * Clears out the collEmployeeFingerToLocations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmployeeFingerToLocations()
	 */
	public function clearEmployeeFingerToLocations()
	{
		$this->collEmployeeFingerToLocations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmployeeFingerToLocations collection (array).
	 *
	 * By default this just sets the collEmployeeFingerToLocations collection to an empty array (like clearcollEmployeeFingerToLocations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmployeeFingerToLocations()
	{
		$this->collEmployeeFingerToLocations = array();
	}

	/**
	 * Gets an array of EmployeeFingerToLocation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related EmployeeFingerToLocations from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmployeeFingerToLocation[]
	 * @throws     PropelException
	 */
	public function getEmployeeFingerToLocations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeFingerToLocations === null) {
			if ($this->isNew()) {
			   $this->collEmployeeFingerToLocations = array();
			} else {

				$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

				EmployeeFingerToLocationPeer::addSelectColumns($criteria);
				$this->collEmployeeFingerToLocations = EmployeeFingerToLocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

				EmployeeFingerToLocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmployeeFingerToLocationCriteria) || !$this->lastEmployeeFingerToLocationCriteria->equals($criteria)) {
					$this->collEmployeeFingerToLocations = EmployeeFingerToLocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmployeeFingerToLocationCriteria = $criteria;
		return $this->collEmployeeFingerToLocations;
	}

	/**
	 * Returns the number of related EmployeeFingerToLocation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmployeeFingerToLocation objects.
	 * @throws     PropelException
	 */
	public function countEmployeeFingerToLocations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmployeeFingerToLocations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

				$count = EmployeeFingerToLocationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastEmployeeFingerToLocationCriteria) || !$this->lastEmployeeFingerToLocationCriteria->equals($criteria)) {
					$count = EmployeeFingerToLocationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmployeeFingerToLocations);
				}
			} else {
				$count = count($this->collEmployeeFingerToLocations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmployeeFingerToLocation object to this object
	 * through the EmployeeFingerToLocation foreign key attribute.
	 *
	 * @param      EmployeeFingerToLocation $l EmployeeFingerToLocation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmployeeFingerToLocation(EmployeeFingerToLocation $l)
	{
		if ($this->collEmployeeFingerToLocations === null) {
			$this->initEmployeeFingerToLocations();
		}
		if (!in_array($l, $this->collEmployeeFingerToLocations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmployeeFingerToLocations, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related EmployeeFingerToLocations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getEmployeeFingerToLocationsJoinEmployeeLocation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeFingerToLocations === null) {
			if ($this->isNew()) {
				$this->collEmployeeFingerToLocations = array();
			} else {

				$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

				$this->collEmployeeFingerToLocations = EmployeeFingerToLocationPeer::doSelectJoinEmployeeLocation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmployeeFingerToLocationPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastEmployeeFingerToLocationCriteria) || !$this->lastEmployeeFingerToLocationCriteria->equals($criteria)) {
				$this->collEmployeeFingerToLocations = EmployeeFingerToLocationPeer::doSelectJoinEmployeeLocation($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmployeeFingerToLocationCriteria = $criteria;

		return $this->collEmployeeFingerToLocations;
	}

	/**
	 * Clears out the collEmployeeToLocations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmployeeToLocations()
	 */
	public function clearEmployeeToLocations()
	{
		$this->collEmployeeToLocations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmployeeToLocations collection (array).
	 *
	 * By default this just sets the collEmployeeToLocations collection to an empty array (like clearcollEmployeeToLocations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmployeeToLocations()
	{
		$this->collEmployeeToLocations = array();
	}

	/**
	 * Gets an array of EmployeeToLocation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related EmployeeToLocations from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmployeeToLocation[]
	 * @throws     PropelException
	 */
	public function getEmployeeToLocations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeToLocations === null) {
			if ($this->isNew()) {
			   $this->collEmployeeToLocations = array();
			} else {

				$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

				EmployeeToLocationPeer::addSelectColumns($criteria);
				$this->collEmployeeToLocations = EmployeeToLocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

				EmployeeToLocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmployeeToLocationCriteria) || !$this->lastEmployeeToLocationCriteria->equals($criteria)) {
					$this->collEmployeeToLocations = EmployeeToLocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmployeeToLocationCriteria = $criteria;
		return $this->collEmployeeToLocations;
	}

	/**
	 * Returns the number of related EmployeeToLocation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmployeeToLocation objects.
	 * @throws     PropelException
	 */
	public function countEmployeeToLocations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmployeeToLocations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

				$count = EmployeeToLocationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastEmployeeToLocationCriteria) || !$this->lastEmployeeToLocationCriteria->equals($criteria)) {
					$count = EmployeeToLocationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmployeeToLocations);
				}
			} else {
				$count = count($this->collEmployeeToLocations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmployeeToLocation object to this object
	 * through the EmployeeToLocation foreign key attribute.
	 *
	 * @param      EmployeeToLocation $l EmployeeToLocation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmployeeToLocation(EmployeeToLocation $l)
	{
		if ($this->collEmployeeToLocations === null) {
			$this->initEmployeeToLocations();
		}
		if (!in_array($l, $this->collEmployeeToLocations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmployeeToLocations, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related EmployeeToLocations from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getEmployeeToLocationsJoinEmployeeLocation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeToLocations === null) {
			if ($this->isNew()) {
				$this->collEmployeeToLocations = array();
			} else {

				$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

				$this->collEmployeeToLocations = EmployeeToLocationPeer::doSelectJoinEmployeeLocation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmployeeToLocationPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastEmployeeToLocationCriteria) || !$this->lastEmployeeToLocationCriteria->equals($criteria)) {
				$this->collEmployeeToLocations = EmployeeToLocationPeer::doSelectJoinEmployeeLocation($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmployeeToLocationCriteria = $criteria;

		return $this->collEmployeeToLocations;
	}

	/**
	 * Gets a single Physical object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     Physical
	 * @throws     PropelException
	 */
	public function getPhysical(PropelPDO $con = null)
	{

		if ($this->singlePhysical === null && !$this->isNew()) {
			$this->singlePhysical = PhysicalPeer::retrieveByPK($this->id, $con);
		}

		return $this->singlePhysical;
	}

	/**
	 * Sets a single Physical object as related to this object by a one-to-one relationship.
	 *
	 * @param      Physical $l Physical
	 * @return     Employee The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPhysical(Physical $v)
	{
		$this->singlePhysical = $v;

		// Make sure that that the passed-in Physical isn't already associated with this object
		if ($v->getEmployee() === null) {
			$v->setEmployee($this);
		}

		return $this;
	}

	/**
	 * Clears out the collClientServices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addClientServices()
	 */
	public function clearClientServices()
	{
		$this->collClientServices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collClientServices collection (array).
	 *
	 * By default this just sets the collClientServices collection to an empty array (like clearcollClientServices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initClientServices()
	{
		$this->collClientServices = array();
	}

	/**
	 * Gets an array of ClientService objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related ClientServices from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ClientService[]
	 * @throws     PropelException
	 */
	public function getClientServices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
			   $this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				ClientServicePeer::addSelectColumns($criteria);
				$this->collClientServices = ClientServicePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				ClientServicePeer::addSelectColumns($criteria);
				if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
					$this->collClientServices = ClientServicePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastClientServiceCriteria = $criteria;
		return $this->collClientServices;
	}

	/**
	 * Returns the number of related ClientService objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ClientService objects.
	 * @throws     PropelException
	 */
	public function countClientServices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$count = ClientServicePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
					$count = ClientServicePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collClientServices);
				}
			} else {
				$count = count($this->collClientServices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ClientService object to this object
	 * through the ClientService foreign key attribute.
	 *
	 * @param      ClientService $l ClientService
	 * @return     void
	 * @throws     PropelException
	 */
	public function addClientService(ClientService $l)
	{
		if ($this->collClientServices === null) {
			$this->initClientServices();
		}
		if (!in_array($l, $this->collClientServices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collClientServices, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getClientServicesJoinClient($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getClientServicesJoinService($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinService($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinService($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getClientServicesJoinFrequency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getClientServicesJoinIcd9($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinIcd9($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinIcd9($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related ClientServices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getClientServicesJoinOffice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collClientServices === null) {
			if ($this->isNew()) {
				$this->collClientServices = array();
			} else {

				$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

				$this->collClientServices = ClientServicePeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastClientServiceCriteria) || !$this->lastClientServiceCriteria->equals($criteria)) {
				$this->collClientServices = ClientServicePeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		}
		$this->lastClientServiceCriteria = $criteria;

		return $this->collClientServices;
	}

	/**
	 * Clears out the collNoteEntrys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNoteEntrys()
	 */
	public function clearNoteEntrys()
	{
		$this->collNoteEntrys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNoteEntrys collection (array).
	 *
	 * By default this just sets the collNoteEntrys collection to an empty array (like clearcollNoteEntrys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNoteEntrys()
	{
		$this->collNoteEntrys = array();
	}

	/**
	 * Gets an array of NoteEntry objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related NoteEntrys from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NoteEntry[]
	 * @throws     PropelException
	 */
	public function getNoteEntrys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
			   $this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNoteEntryCriteria = $criteria;
		return $this->collNoteEntrys;
	}

	/**
	 * Returns the number of related NoteEntry objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NoteEntry objects.
	 * @throws     PropelException
	 */
	public function countNoteEntrys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				$count = NoteEntryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$count = NoteEntryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNoteEntrys);
				}
			} else {
				$count = count($this->collNoteEntrys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NoteEntry object to this object
	 * through the NoteEntry foreign key attribute.
	 *
	 * @param      NoteEntry $l NoteEntry
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNoteEntry(NoteEntry $l)
	{
		if ($this->collNoteEntrys === null) {
			$this->initNoteEntrys();
		}
		if (!in_array($l, $this->collNoteEntrys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNoteEntrys, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getNoteEntrysJoinClient($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getNoteEntrysJoinClientService($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClientService($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClientService($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getNoteEntrysJoinOffice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getNoteEntrysJoinFrequency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collsfGuardUserProfiles) {
				foreach ((array) $this->collsfGuardUserProfiles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmployeeFingerToLocations) {
				foreach ((array) $this->collEmployeeFingerToLocations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmployeeToLocations) {
				foreach ((array) $this->collEmployeeToLocations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singlePhysical) {
				$this->singlePhysical->clearAllReferences($deep);
			}
			if ($this->collClientServices) {
				foreach ((array) $this->collClientServices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNoteEntrys) {
				foreach ((array) $this->collNoteEntrys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collsfGuardUserProfiles = null;
		$this->collEmployeeFingerToLocations = null;
		$this->collEmployeeToLocations = null;
		$this->singlePhysical = null;
		$this->collClientServices = null;
		$this->collNoteEntrys = null;
			$this->aJob = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmployee:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmployee::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmployee
