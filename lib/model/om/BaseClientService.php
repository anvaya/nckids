<?php

/**
 * Base class that represents a row from the 'client_service' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Mar 29 20:17:55 2011
 *
 * @package    lib.model.om
 */
abstract class BaseClientService extends BaseObject  implements Persistent {


  const PEER = 'ClientServicePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ClientServicePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the client_id field.
	 * @var        int
	 */
	protected $client_id;

	/**
	 * The value for the employee_id field.
	 * @var        int
	 */
	protected $employee_id;

	/**
	 * The value for the service_id field.
	 * @var        int
	 */
	protected $service_id;

	/**
	 * The value for the frequency_id field.
	 * @var        int
	 */
	protected $frequency_id;

	/**
	 * The value for the start_date field.
	 * @var        string
	 */
	protected $start_date;

	/**
	 * The value for the end_date field.
	 * @var        string
	 */
	protected $end_date;

	/**
	 * The value for the change_date field.
	 * @var        string
	 */
	protected $change_date;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the icd9_id field.
	 * @var        int
	 */
	protected $icd9_id;

	/**
	 * The value for the authorization field.
	 * @var        string
	 */
	protected $authorization;

	/**
	 * The value for the physicians_order field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $physicians_order;

	/**
	 * The value for the office_id field.
	 * @var        int
	 */
	protected $office_id;

	/**
	 * The value for the waiting_list field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $waiting_list;

	/**
	 * The value for the object_type field.
	 * @var        string
	 */
	protected $object_type;

	/**
	 * @var        Client
	 */
	protected $aClient;

	/**
	 * @var        Employee
	 */
	protected $aEmployee;

	/**
	 * @var        Service
	 */
	protected $aService;

	/**
	 * @var        Frequency
	 */
	protected $aFrequency;

	/**
	 * @var        Icd9
	 */
	protected $aIcd9;

	/**
	 * @var        Office
	 */
	protected $aOffice;

	/**
	 * @var        array NoteEntry[] Collection to store aggregation of NoteEntry objects.
	 */
	protected $collNoteEntrys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNoteEntrys.
	 */
	private $lastNoteEntryCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseClientService object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->physicians_order = false;
		$this->waiting_list = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [client_id] column value.
	 * 
	 * @return     int
	 */
	public function getClientId()
	{
		return $this->client_id;
	}

	/**
	 * Get the [employee_id] column value.
	 * 
	 * @return     int
	 */
	public function getEmployeeId()
	{
		return $this->employee_id;
	}

	/**
	 * Get the [service_id] column value.
	 * 
	 * @return     int
	 */
	public function getServiceId()
	{
		return $this->service_id;
	}

	/**
	 * Get the [frequency_id] column value.
	 * 
	 * @return     int
	 */
	public function getFrequencyId()
	{
		return $this->frequency_id;
	}

	/**
	 * Get the [optionally formatted] temporal [start_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getStartDate($format = 'Y-m-d H:i:s')
	{
		if ($this->start_date === null) {
			return null;
		}


		if ($this->start_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->start_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->start_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [end_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEndDate($format = 'Y-m-d H:i:s')
	{
		if ($this->end_date === null) {
			return null;
		}


		if ($this->end_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->end_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->end_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [change_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getChangeDate($format = 'Y-m-d H:i:s')
	{
		if ($this->change_date === null) {
			return null;
		}


		if ($this->change_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->change_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->change_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [icd9_id] column value.
	 * 
	 * @return     int
	 */
	public function getIcd9Id()
	{
		return $this->icd9_id;
	}

	/**
	 * Get the [authorization] column value.
	 * 
	 * @return     string
	 */
	public function getAuthorization()
	{
		return $this->authorization;
	}

	/**
	 * Get the [physicians_order] column value.
	 * 
	 * @return     boolean
	 */
	public function getPhysiciansOrder()
	{
		return $this->physicians_order;
	}

	/**
	 * Get the [office_id] column value.
	 * 
	 * @return     int
	 */
	public function getOfficeId()
	{
		return $this->office_id;
	}

	/**
	 * Get the [waiting_list] column value.
	 * 
	 * @return     boolean
	 */
	public function getWaitingList()
	{
		return $this->waiting_list;
	}

	/**
	 * Get the [object_type] column value.
	 * 
	 * @return     string
	 */
	public function getObjectType()
	{
		return $this->object_type;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ClientServicePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [client_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setClientId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->client_id !== $v) {
			$this->client_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::CLIENT_ID;
		}

		if ($this->aClient !== null && $this->aClient->getId() !== $v) {
			$this->aClient = null;
		}

		return $this;
	} // setClientId()

	/**
	 * Set the value of [employee_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setEmployeeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->employee_id !== $v) {
			$this->employee_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::EMPLOYEE_ID;
		}

		if ($this->aEmployee !== null && $this->aEmployee->getId() !== $v) {
			$this->aEmployee = null;
		}

		return $this;
	} // setEmployeeId()

	/**
	 * Set the value of [service_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setServiceId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->service_id !== $v) {
			$this->service_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::SERVICE_ID;
		}

		if ($this->aService !== null && $this->aService->getId() !== $v) {
			$this->aService = null;
		}

		return $this;
	} // setServiceId()

	/**
	 * Set the value of [frequency_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setFrequencyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->frequency_id !== $v) {
			$this->frequency_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::FREQUENCY_ID;
		}

		if ($this->aFrequency !== null && $this->aFrequency->getId() !== $v) {
			$this->aFrequency = null;
		}

		return $this;
	} // setFrequencyId()

	/**
	 * Sets the value of [start_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setStartDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->start_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->start_date !== null && $tmpDt = new DateTime($this->start_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->start_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientServicePeer::START_DATE;
			}
		} // if either are not null

		return $this;
	} // setStartDate()

	/**
	 * Sets the value of [end_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setEndDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->end_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->end_date !== null && $tmpDt = new DateTime($this->end_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->end_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientServicePeer::END_DATE;
			}
		} // if either are not null

		return $this;
	} // setEndDate()

	/**
	 * Sets the value of [change_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setChangeDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->change_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->change_date !== null && $tmpDt = new DateTime($this->change_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->change_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ClientServicePeer::CHANGE_DATE;
			}
		} // if either are not null

		return $this;
	} // setChangeDate()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = ClientServicePeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Set the value of [icd9_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setIcd9Id($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->icd9_id !== $v) {
			$this->icd9_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::ICD9_ID;
		}

		if ($this->aIcd9 !== null && $this->aIcd9->getId() !== $v) {
			$this->aIcd9 = null;
		}

		return $this;
	} // setIcd9Id()

	/**
	 * Set the value of [authorization] column.
	 * 
	 * @param      string $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setAuthorization($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->authorization !== $v) {
			$this->authorization = $v;
			$this->modifiedColumns[] = ClientServicePeer::AUTHORIZATION;
		}

		return $this;
	} // setAuthorization()

	/**
	 * Set the value of [physicians_order] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setPhysiciansOrder($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->physicians_order !== $v || $v === false) {
			$this->physicians_order = $v;
			$this->modifiedColumns[] = ClientServicePeer::PHYSICIANS_ORDER;
		}

		return $this;
	} // setPhysiciansOrder()

	/**
	 * Set the value of [office_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setOfficeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->office_id !== $v) {
			$this->office_id = $v;
			$this->modifiedColumns[] = ClientServicePeer::OFFICE_ID;
		}

		if ($this->aOffice !== null && $this->aOffice->getId() !== $v) {
			$this->aOffice = null;
		}

		return $this;
	} // setOfficeId()

	/**
	 * Set the value of [waiting_list] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setWaitingList($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->waiting_list !== $v || $v === false) {
			$this->waiting_list = $v;
			$this->modifiedColumns[] = ClientServicePeer::WAITING_LIST;
		}

		return $this;
	} // setWaitingList()

	/**
	 * Set the value of [object_type] column.
	 * 
	 * @param      string $v new value
	 * @return     ClientService The current object (for fluent API support)
	 */
	public function setObjectType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->object_type !== $v) {
			$this->object_type = $v;
			$this->modifiedColumns[] = ClientServicePeer::OBJECT_TYPE;
		}

		return $this;
	} // setObjectType()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ClientServicePeer::PHYSICIANS_ORDER,ClientServicePeer::WAITING_LIST))) {
				return false;
			}

			if ($this->physicians_order !== false) {
				return false;
			}

			if ($this->waiting_list !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->client_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->employee_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->service_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->frequency_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->start_date = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->end_date = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->change_date = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->notes = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->icd9_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->authorization = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->physicians_order = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->office_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->waiting_list = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->object_type = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 15; // 15 = ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ClientService object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aClient !== null && $this->client_id !== $this->aClient->getId()) {
			$this->aClient = null;
		}
		if ($this->aEmployee !== null && $this->employee_id !== $this->aEmployee->getId()) {
			$this->aEmployee = null;
		}
		if ($this->aService !== null && $this->service_id !== $this->aService->getId()) {
			$this->aService = null;
		}
		if ($this->aFrequency !== null && $this->frequency_id !== $this->aFrequency->getId()) {
			$this->aFrequency = null;
		}
		if ($this->aIcd9 !== null && $this->icd9_id !== $this->aIcd9->getId()) {
			$this->aIcd9 = null;
		}
		if ($this->aOffice !== null && $this->office_id !== $this->aOffice->getId()) {
			$this->aOffice = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ClientServicePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aClient = null;
			$this->aEmployee = null;
			$this->aService = null;
			$this->aFrequency = null;
			$this->aIcd9 = null;
			$this->aOffice = null;
			$this->collNoteEntrys = null;
			$this->lastNoteEntryCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientService:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ClientServicePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseClientService:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientService:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseClientService:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ClientServicePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClient !== null) {
				if ($this->aClient->isModified() || $this->aClient->isNew()) {
					$affectedRows += $this->aClient->save($con);
				}
				$this->setClient($this->aClient);
			}

			if ($this->aEmployee !== null) {
				if ($this->aEmployee->isModified() || $this->aEmployee->isNew()) {
					$affectedRows += $this->aEmployee->save($con);
				}
				$this->setEmployee($this->aEmployee);
			}

			if ($this->aService !== null) {
				if ($this->aService->isModified() || $this->aService->isNew()) {
					$affectedRows += $this->aService->save($con);
				}
				$this->setService($this->aService);
			}

			if ($this->aFrequency !== null) {
				if ($this->aFrequency->isModified() || $this->aFrequency->isNew()) {
					$affectedRows += $this->aFrequency->save($con);
				}
				$this->setFrequency($this->aFrequency);
			}

			if ($this->aIcd9 !== null) {
				if ($this->aIcd9->isModified() || $this->aIcd9->isNew()) {
					$affectedRows += $this->aIcd9->save($con);
				}
				$this->setIcd9($this->aIcd9);
			}

			if ($this->aOffice !== null) {
				if ($this->aOffice->isModified() || $this->aOffice->isNew()) {
					$affectedRows += $this->aOffice->save($con);
				}
				$this->setOffice($this->aOffice);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ClientServicePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ClientServicePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ClientServicePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collNoteEntrys !== null) {
				foreach ($this->collNoteEntrys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aClient !== null) {
				if (!$this->aClient->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aClient->getValidationFailures());
				}
			}

			if ($this->aEmployee !== null) {
				if (!$this->aEmployee->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEmployee->getValidationFailures());
				}
			}

			if ($this->aService !== null) {
				if (!$this->aService->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aService->getValidationFailures());
				}
			}

			if ($this->aFrequency !== null) {
				if (!$this->aFrequency->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFrequency->getValidationFailures());
				}
			}

			if ($this->aIcd9 !== null) {
				if (!$this->aIcd9->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aIcd9->getValidationFailures());
				}
			}

			if ($this->aOffice !== null) {
				if (!$this->aOffice->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOffice->getValidationFailures());
				}
			}


			if (($retval = ClientServicePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collNoteEntrys !== null) {
					foreach ($this->collNoteEntrys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ClientServicePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getClientId();
				break;
			case 2:
				return $this->getEmployeeId();
				break;
			case 3:
				return $this->getServiceId();
				break;
			case 4:
				return $this->getFrequencyId();
				break;
			case 5:
				return $this->getStartDate();
				break;
			case 6:
				return $this->getEndDate();
				break;
			case 7:
				return $this->getChangeDate();
				break;
			case 8:
				return $this->getNotes();
				break;
			case 9:
				return $this->getIcd9Id();
				break;
			case 10:
				return $this->getAuthorization();
				break;
			case 11:
				return $this->getPhysiciansOrder();
				break;
			case 12:
				return $this->getOfficeId();
				break;
			case 13:
				return $this->getWaitingList();
				break;
			case 14:
				return $this->getObjectType();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ClientServicePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getClientId(),
			$keys[2] => $this->getEmployeeId(),
			$keys[3] => $this->getServiceId(),
			$keys[4] => $this->getFrequencyId(),
			$keys[5] => $this->getStartDate(),
			$keys[6] => $this->getEndDate(),
			$keys[7] => $this->getChangeDate(),
			$keys[8] => $this->getNotes(),
			$keys[9] => $this->getIcd9Id(),
			$keys[10] => $this->getAuthorization(),
			$keys[11] => $this->getPhysiciansOrder(),
			$keys[12] => $this->getOfficeId(),
			$keys[13] => $this->getWaitingList(),
			$keys[14] => $this->getObjectType(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ClientServicePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setClientId($value);
				break;
			case 2:
				$this->setEmployeeId($value);
				break;
			case 3:
				$this->setServiceId($value);
				break;
			case 4:
				$this->setFrequencyId($value);
				break;
			case 5:
				$this->setStartDate($value);
				break;
			case 6:
				$this->setEndDate($value);
				break;
			case 7:
				$this->setChangeDate($value);
				break;
			case 8:
				$this->setNotes($value);
				break;
			case 9:
				$this->setIcd9Id($value);
				break;
			case 10:
				$this->setAuthorization($value);
				break;
			case 11:
				$this->setPhysiciansOrder($value);
				break;
			case 12:
				$this->setOfficeId($value);
				break;
			case 13:
				$this->setWaitingList($value);
				break;
			case 14:
				$this->setObjectType($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ClientServicePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setClientId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setEmployeeId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setServiceId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFrequencyId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setStartDate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setEndDate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setChangeDate($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNotes($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIcd9Id($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAuthorization($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPhysiciansOrder($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOfficeId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setWaitingList($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setObjectType($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);

		if ($this->isColumnModified(ClientServicePeer::ID)) $criteria->add(ClientServicePeer::ID, $this->id);
		if ($this->isColumnModified(ClientServicePeer::CLIENT_ID)) $criteria->add(ClientServicePeer::CLIENT_ID, $this->client_id);
		if ($this->isColumnModified(ClientServicePeer::EMPLOYEE_ID)) $criteria->add(ClientServicePeer::EMPLOYEE_ID, $this->employee_id);
		if ($this->isColumnModified(ClientServicePeer::SERVICE_ID)) $criteria->add(ClientServicePeer::SERVICE_ID, $this->service_id);
		if ($this->isColumnModified(ClientServicePeer::FREQUENCY_ID)) $criteria->add(ClientServicePeer::FREQUENCY_ID, $this->frequency_id);
		if ($this->isColumnModified(ClientServicePeer::START_DATE)) $criteria->add(ClientServicePeer::START_DATE, $this->start_date);
		if ($this->isColumnModified(ClientServicePeer::END_DATE)) $criteria->add(ClientServicePeer::END_DATE, $this->end_date);
		if ($this->isColumnModified(ClientServicePeer::CHANGE_DATE)) $criteria->add(ClientServicePeer::CHANGE_DATE, $this->change_date);
		if ($this->isColumnModified(ClientServicePeer::NOTES)) $criteria->add(ClientServicePeer::NOTES, $this->notes);
		if ($this->isColumnModified(ClientServicePeer::ICD9_ID)) $criteria->add(ClientServicePeer::ICD9_ID, $this->icd9_id);
		if ($this->isColumnModified(ClientServicePeer::AUTHORIZATION)) $criteria->add(ClientServicePeer::AUTHORIZATION, $this->authorization);
		if ($this->isColumnModified(ClientServicePeer::PHYSICIANS_ORDER)) $criteria->add(ClientServicePeer::PHYSICIANS_ORDER, $this->physicians_order);
		if ($this->isColumnModified(ClientServicePeer::OFFICE_ID)) $criteria->add(ClientServicePeer::OFFICE_ID, $this->office_id);
		if ($this->isColumnModified(ClientServicePeer::WAITING_LIST)) $criteria->add(ClientServicePeer::WAITING_LIST, $this->waiting_list);
		if ($this->isColumnModified(ClientServicePeer::OBJECT_TYPE)) $criteria->add(ClientServicePeer::OBJECT_TYPE, $this->object_type);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);

		$criteria->add(ClientServicePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ClientService (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setClientId($this->client_id);

		$copyObj->setEmployeeId($this->employee_id);

		$copyObj->setServiceId($this->service_id);

		$copyObj->setFrequencyId($this->frequency_id);

		$copyObj->setStartDate($this->start_date);

		$copyObj->setEndDate($this->end_date);

		$copyObj->setChangeDate($this->change_date);

		$copyObj->setNotes($this->notes);

		$copyObj->setIcd9Id($this->icd9_id);

		$copyObj->setAuthorization($this->authorization);

		$copyObj->setPhysiciansOrder($this->physicians_order);

		$copyObj->setOfficeId($this->office_id);

		$copyObj->setWaitingList($this->waiting_list);

		$copyObj->setObjectType($this->object_type);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getNoteEntrys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNoteEntry($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ClientService Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ClientServicePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ClientServicePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Client object.
	 *
	 * @param      Client $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setClient(Client $v = null)
	{
		if ($v === null) {
			$this->setClientId(NULL);
		} else {
			$this->setClientId($v->getId());
		}

		$this->aClient = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Client object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Client object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Client The associated Client object.
	 * @throws     PropelException
	 */
	public function getClient(PropelPDO $con = null)
	{
		if ($this->aClient === null && ($this->client_id !== null)) {
			$c = new Criteria(ClientPeer::DATABASE_NAME);
			$c->add(ClientPeer::ID, $this->client_id);
			$this->aClient = ClientPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aClient->addClientServices($this);
			 */
		}
		return $this->aClient;
	}

	/**
	 * Declares an association between this object and a Employee object.
	 *
	 * @param      Employee $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEmployee(Employee $v = null)
	{
		if ($v === null) {
			$this->setEmployeeId(NULL);
		} else {
			$this->setEmployeeId($v->getId());
		}

		$this->aEmployee = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Employee object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Employee object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Employee The associated Employee object.
	 * @throws     PropelException
	 */
	public function getEmployee(PropelPDO $con = null)
	{
		if ($this->aEmployee === null && ($this->employee_id !== null)) {
			$c = new Criteria(EmployeePeer::DATABASE_NAME);
			$c->add(EmployeePeer::ID, $this->employee_id);
			$this->aEmployee = EmployeePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEmployee->addClientServices($this);
			 */
		}
		return $this->aEmployee;
	}

	/**
	 * Declares an association between this object and a Service object.
	 *
	 * @param      Service $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setService(Service $v = null)
	{
		if ($v === null) {
			$this->setServiceId(NULL);
		} else {
			$this->setServiceId($v->getId());
		}

		$this->aService = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Service object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Service object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Service The associated Service object.
	 * @throws     PropelException
	 */
	public function getService(PropelPDO $con = null)
	{
		if ($this->aService === null && ($this->service_id !== null)) {
			$c = new Criteria(ServicePeer::DATABASE_NAME);
			$c->add(ServicePeer::ID, $this->service_id);
			$this->aService = ServicePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aService->addClientServices($this);
			 */
		}
		return $this->aService;
	}

	/**
	 * Declares an association between this object and a Frequency object.
	 *
	 * @param      Frequency $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFrequency(Frequency $v = null)
	{
		if ($v === null) {
			$this->setFrequencyId(NULL);
		} else {
			$this->setFrequencyId($v->getId());
		}

		$this->aFrequency = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Frequency object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Frequency object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Frequency The associated Frequency object.
	 * @throws     PropelException
	 */
	public function getFrequency(PropelPDO $con = null)
	{
		if ($this->aFrequency === null && ($this->frequency_id !== null)) {
			$c = new Criteria(FrequencyPeer::DATABASE_NAME);
			$c->add(FrequencyPeer::ID, $this->frequency_id);
			$this->aFrequency = FrequencyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aFrequency->addClientServices($this);
			 */
		}
		return $this->aFrequency;
	}

	/**
	 * Declares an association between this object and a Icd9 object.
	 *
	 * @param      Icd9 $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setIcd9(Icd9 $v = null)
	{
		if ($v === null) {
			$this->setIcd9Id(NULL);
		} else {
			$this->setIcd9Id($v->getId());
		}

		$this->aIcd9 = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Icd9 object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Icd9 object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Icd9 The associated Icd9 object.
	 * @throws     PropelException
	 */
	public function getIcd9(PropelPDO $con = null)
	{
		if ($this->aIcd9 === null && ($this->icd9_id !== null)) {
			$c = new Criteria(Icd9Peer::DATABASE_NAME);
			$c->add(Icd9Peer::ID, $this->icd9_id);
			$this->aIcd9 = Icd9Peer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aIcd9->addClientServices($this);
			 */
		}
		return $this->aIcd9;
	}

	/**
	 * Declares an association between this object and a Office object.
	 *
	 * @param      Office $v
	 * @return     ClientService The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOffice(Office $v = null)
	{
		if ($v === null) {
			$this->setOfficeId(NULL);
		} else {
			$this->setOfficeId($v->getId());
		}

		$this->aOffice = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Office object, it will not be re-added.
		if ($v !== null) {
			$v->addClientService($this);
		}

		return $this;
	}


	/**
	 * Get the associated Office object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Office The associated Office object.
	 * @throws     PropelException
	 */
	public function getOffice(PropelPDO $con = null)
	{
		if ($this->aOffice === null && ($this->office_id !== null)) {
			$c = new Criteria(OfficePeer::DATABASE_NAME);
			$c->add(OfficePeer::ID, $this->office_id);
			$this->aOffice = OfficePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOffice->addClientServices($this);
			 */
		}
		return $this->aOffice;
	}

	/**
	 * Clears out the collNoteEntrys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNoteEntrys()
	 */
	public function clearNoteEntrys()
	{
		$this->collNoteEntrys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNoteEntrys collection (array).
	 *
	 * By default this just sets the collNoteEntrys collection to an empty array (like clearcollNoteEntrys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNoteEntrys()
	{
		$this->collNoteEntrys = array();
	}

	/**
	 * Gets an array of NoteEntry objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this ClientService has previously been saved, it will retrieve
	 * related NoteEntrys from storage. If this ClientService is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array NoteEntry[]
	 * @throws     PropelException
	 */
	public function getNoteEntrys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
			   $this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				NoteEntryPeer::addSelectColumns($criteria);
				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$this->collNoteEntrys = NoteEntryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNoteEntryCriteria = $criteria;
		return $this->collNoteEntrys;
	}

	/**
	 * Returns the number of related NoteEntry objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related NoteEntry objects.
	 * @throws     PropelException
	 */
	public function countNoteEntrys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				$count = NoteEntryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
					$count = NoteEntryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNoteEntrys);
				}
			} else {
				$count = count($this->collNoteEntrys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a NoteEntry object to this object
	 * through the NoteEntry foreign key attribute.
	 *
	 * @param      NoteEntry $l NoteEntry
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNoteEntry(NoteEntry $l)
	{
		if ($this->collNoteEntrys === null) {
			$this->initNoteEntrys();
		}
		if (!in_array($l, $this->collNoteEntrys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNoteEntrys, $l);
			$l->setClientService($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ClientService is new, it will return
	 * an empty collection; or if this ClientService has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ClientService.
	 */
	public function getNoteEntrysJoinEmployee($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinEmployee($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ClientService is new, it will return
	 * an empty collection; or if this ClientService has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ClientService.
	 */
	public function getNoteEntrysJoinClient($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinClient($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ClientService is new, it will return
	 * an empty collection; or if this ClientService has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ClientService.
	 */
	public function getNoteEntrysJoinOffice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinOffice($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ClientService is new, it will return
	 * an empty collection; or if this ClientService has previously
	 * been saved, it will retrieve related NoteEntrys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ClientService.
	 */
	public function getNoteEntrysJoinFrequency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNoteEntrys === null) {
			if ($this->isNew()) {
				$this->collNoteEntrys = array();
			} else {

				$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $this->id);

			if (!isset($this->lastNoteEntryCriteria) || !$this->lastNoteEntryCriteria->equals($criteria)) {
				$this->collNoteEntrys = NoteEntryPeer::doSelectJoinFrequency($criteria, $con, $join_behavior);
			}
		}
		$this->lastNoteEntryCriteria = $criteria;

		return $this->collNoteEntrys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collNoteEntrys) {
				foreach ((array) $this->collNoteEntrys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collNoteEntrys = null;
			$this->aClient = null;
			$this->aEmployee = null;
			$this->aService = null;
			$this->aFrequency = null;
			$this->aIcd9 = null;
			$this->aOffice = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseClientService:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseClientService::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseClientService
