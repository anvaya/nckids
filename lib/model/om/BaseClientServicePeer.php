<?php

/**
 * Base static class for performing query and update operations on the 'client_service' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Mar 29 20:17:55 2011
 *
 * @package    lib.model.om
 */
abstract class BaseClientServicePeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'client_service';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.ClientService';

	/** The total number of columns. */
	const NUM_COLUMNS = 15;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'client_service.ID';

	/** the column name for the CLIENT_ID field */
	const CLIENT_ID = 'client_service.CLIENT_ID';

	/** the column name for the EMPLOYEE_ID field */
	const EMPLOYEE_ID = 'client_service.EMPLOYEE_ID';

	/** the column name for the SERVICE_ID field */
	const SERVICE_ID = 'client_service.SERVICE_ID';

	/** the column name for the FREQUENCY_ID field */
	const FREQUENCY_ID = 'client_service.FREQUENCY_ID';

	/** the column name for the START_DATE field */
	const START_DATE = 'client_service.START_DATE';

	/** the column name for the END_DATE field */
	const END_DATE = 'client_service.END_DATE';

	/** the column name for the CHANGE_DATE field */
	const CHANGE_DATE = 'client_service.CHANGE_DATE';

	/** the column name for the NOTES field */
	const NOTES = 'client_service.NOTES';

	/** the column name for the ICD9_ID field */
	const ICD9_ID = 'client_service.ICD9_ID';

	/** the column name for the AUTHORIZATION field */
	const AUTHORIZATION = 'client_service.AUTHORIZATION';

	/** the column name for the PHYSICIANS_ORDER field */
	const PHYSICIANS_ORDER = 'client_service.PHYSICIANS_ORDER';

	/** the column name for the OFFICE_ID field */
	const OFFICE_ID = 'client_service.OFFICE_ID';

	/** the column name for the WAITING_LIST field */
	const WAITING_LIST = 'client_service.WAITING_LIST';

	/** the column name for the OBJECT_TYPE field */
	const OBJECT_TYPE = 'client_service.OBJECT_TYPE';

	/** A key representing a particular subclass */
	const CLASSKEY_PRESCHOOL = 'preschool';

	/** A class that can be returned by this peer. */
	const CLASSNAME_PRESCHOOL = 'lib.model.Preschool';

	/** A key representing a particular subclass */
	const CLASSKEY_SEIT = 'seit';

	/** A class that can be returned by this peer. */
	const CLASSNAME_SEIT = 'lib.model.Seit';

	/** A key representing a particular subclass */
	const CLASSKEY_EI = 'ei';

	/** A class that can be returned by this peer. */
	const CLASSNAME_EI = 'lib.model.Ei';

	/** A key representing a particular subclass */
	const CLASSKEY_CLASSROOM = 'classroom';

	/** A class that can be returned by this peer. */
	const CLASSNAME_CLASSROOM = 'lib.model.Classroom';

	/** A key representing a particular subclass */
	const CLASSKEY_SCHOOL_AGE = 'school_age';

	/** A key representing a particular subclass */
	const CLASSKEY_SCHOOLAGE = 'school_age';

	/** A class that can be returned by this peer. */
	const CLASSNAME_SCHOOL_AGE = 'lib.model.SchoolAge';

	/**
	 * An identiy map to hold any loaded instances of ClientService objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array ClientService[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'ClientId', 'EmployeeId', 'ServiceId', 'FrequencyId', 'StartDate', 'EndDate', 'ChangeDate', 'Notes', 'Icd9Id', 'Authorization', 'PhysiciansOrder', 'OfficeId', 'WaitingList', 'ObjectType', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'clientId', 'employeeId', 'serviceId', 'frequencyId', 'startDate', 'endDate', 'changeDate', 'notes', 'icd9Id', 'authorization', 'physiciansOrder', 'officeId', 'waitingList', 'objectType', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::CLIENT_ID, self::EMPLOYEE_ID, self::SERVICE_ID, self::FREQUENCY_ID, self::START_DATE, self::END_DATE, self::CHANGE_DATE, self::NOTES, self::ICD9_ID, self::AUTHORIZATION, self::PHYSICIANS_ORDER, self::OFFICE_ID, self::WAITING_LIST, self::OBJECT_TYPE, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'client_id', 'employee_id', 'service_id', 'frequency_id', 'start_date', 'end_date', 'change_date', 'notes', 'icd9_id', 'authorization', 'physicians_order', 'office_id', 'waiting_list', 'object_type', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'ClientId' => 1, 'EmployeeId' => 2, 'ServiceId' => 3, 'FrequencyId' => 4, 'StartDate' => 5, 'EndDate' => 6, 'ChangeDate' => 7, 'Notes' => 8, 'Icd9Id' => 9, 'Authorization' => 10, 'PhysiciansOrder' => 11, 'OfficeId' => 12, 'WaitingList' => 13, 'ObjectType' => 14, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'clientId' => 1, 'employeeId' => 2, 'serviceId' => 3, 'frequencyId' => 4, 'startDate' => 5, 'endDate' => 6, 'changeDate' => 7, 'notes' => 8, 'icd9Id' => 9, 'authorization' => 10, 'physiciansOrder' => 11, 'officeId' => 12, 'waitingList' => 13, 'objectType' => 14, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::CLIENT_ID => 1, self::EMPLOYEE_ID => 2, self::SERVICE_ID => 3, self::FREQUENCY_ID => 4, self::START_DATE => 5, self::END_DATE => 6, self::CHANGE_DATE => 7, self::NOTES => 8, self::ICD9_ID => 9, self::AUTHORIZATION => 10, self::PHYSICIANS_ORDER => 11, self::OFFICE_ID => 12, self::WAITING_LIST => 13, self::OBJECT_TYPE => 14, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'client_id' => 1, 'employee_id' => 2, 'service_id' => 3, 'frequency_id' => 4, 'start_date' => 5, 'end_date' => 6, 'change_date' => 7, 'notes' => 8, 'icd9_id' => 9, 'authorization' => 10, 'physicians_order' => 11, 'office_id' => 12, 'waiting_list' => 13, 'object_type' => 14, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ClientServiceMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ClientServicePeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ClientServicePeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ClientServicePeer::ID);

		$criteria->addSelectColumn(ClientServicePeer::CLIENT_ID);

		$criteria->addSelectColumn(ClientServicePeer::EMPLOYEE_ID);

		$criteria->addSelectColumn(ClientServicePeer::SERVICE_ID);

		$criteria->addSelectColumn(ClientServicePeer::FREQUENCY_ID);

		$criteria->addSelectColumn(ClientServicePeer::START_DATE);

		$criteria->addSelectColumn(ClientServicePeer::END_DATE);

		$criteria->addSelectColumn(ClientServicePeer::CHANGE_DATE);

		$criteria->addSelectColumn(ClientServicePeer::NOTES);

		$criteria->addSelectColumn(ClientServicePeer::ICD9_ID);

		$criteria->addSelectColumn(ClientServicePeer::AUTHORIZATION);

		$criteria->addSelectColumn(ClientServicePeer::PHYSICIANS_ORDER);

		$criteria->addSelectColumn(ClientServicePeer::OFFICE_ID);

		$criteria->addSelectColumn(ClientServicePeer::WAITING_LIST);

		$criteria->addSelectColumn(ClientServicePeer::OBJECT_TYPE);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     ClientService
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ClientServicePeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ClientServicePeer::populateObjects(ClientServicePeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ClientServicePeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      ClientService $value A ClientService object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(ClientService $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A ClientService object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof ClientService) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or ClientService object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     ClientService Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ClientServicePeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				// class must be set each time from the record row
				$cls = ClientServicePeer::getOMClass($row, 0);
				$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ClientServicePeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Client table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinClient(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Employee table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinEmployee(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Service table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinService(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Frequency table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFrequency(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Icd9 table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinIcd9(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Office table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinOffice(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Client objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinClient(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		ClientPeer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ClientPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ClientPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Employee objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinEmployee(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		EmployeePeer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = EmployeePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = EmployeePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					EmployeePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Employee)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Service objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinService(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		ServicePeer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ServicePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ServicePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ServicePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Service)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Frequency objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFrequency(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		FrequencyPeer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FrequencyPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = FrequencyPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FrequencyPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Frequency)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Icd9 objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinIcd9(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		Icd9Peer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = Icd9Peer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = Icd9Peer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					Icd9Peer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Icd9)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with their Office objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinOffice(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);
		OfficePeer::addSelectColumns($c);

		$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = OfficePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = OfficePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					OfficePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ClientService) to $obj2 (Office)
				$obj2->addClientService($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ClientServicePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
		$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
		$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
		$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol7 = $startcol6 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
		$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
		$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
		$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
		$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
		$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Client rows

			$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = ClientPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);
			} // if joined row not null

			// Add objects for joined Employee rows

			$key3 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = EmployeePeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EmployeePeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Employee)
				$obj3->addClientService($obj1);
			} // if joined row not null

			// Add objects for joined Service rows

			$key4 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = ServicePeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ServicePeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Service)
				$obj4->addClientService($obj1);
			} // if joined row not null

			// Add objects for joined Frequency rows

			$key5 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = FrequencyPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					FrequencyPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Frequency)
				$obj5->addClientService($obj1);
			} // if joined row not null

			// Add objects for joined Icd9 rows

			$key6 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = Icd9Peer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					Icd9Peer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Icd9)
				$obj6->addClientService($obj1);
			} // if joined row not null

			// Add objects for joined Office rows

			$key7 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = OfficePeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					OfficePeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (ClientService) to the collection in $obj7 (Office)
				$obj7->addClientService($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Client table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptClient(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Employee table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptEmployee(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Service table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptService(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Frequency table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptFrequency(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Icd9 table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptIcd9(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Office table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptOffice(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ClientServicePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseClientServicePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Client.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptClient(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol6 = $startcol5 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Employee rows

				$key2 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = EmployeePeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					EmployeePeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Employee)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Service rows

				$key3 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ServicePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ServicePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Service)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Frequency rows

				$key4 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FrequencyPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FrequencyPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Frequency)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Icd9 rows

				$key5 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = Icd9Peer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					Icd9Peer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Icd9)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Office rows

				$key6 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = OfficePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					OfficePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Office)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Employee.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptEmployee(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol6 = $startcol5 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Client rows

				$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Service rows

				$key3 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ServicePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ServicePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Service)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Frequency rows

				$key4 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FrequencyPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FrequencyPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Frequency)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Icd9 rows

				$key5 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = Icd9Peer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					Icd9Peer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Icd9)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Office rows

				$key6 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = OfficePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					OfficePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Office)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Service.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptService(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol6 = $startcol5 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Client rows

				$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Employee rows

				$key3 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EmployeePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EmployeePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Employee)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Frequency rows

				$key4 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = FrequencyPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					FrequencyPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Frequency)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Icd9 rows

				$key5 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = Icd9Peer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					Icd9Peer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Icd9)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Office rows

				$key6 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = OfficePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					OfficePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Office)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Frequency.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptFrequency(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol6 = $startcol5 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Client rows

				$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Employee rows

				$key3 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EmployeePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EmployeePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Employee)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Service rows

				$key4 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ServicePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ServicePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Service)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Icd9 rows

				$key5 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = Icd9Peer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					Icd9Peer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Icd9)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Office rows

				$key6 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = OfficePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					OfficePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Office)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Icd9.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptIcd9(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		OfficePeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (OfficePeer::NUM_COLUMNS - OfficePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::OFFICE_ID,), array(OfficePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Client rows

				$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Employee rows

				$key3 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EmployeePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EmployeePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Employee)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Service rows

				$key4 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ServicePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ServicePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Service)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Frequency rows

				$key5 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = FrequencyPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					FrequencyPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Frequency)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Office rows

				$key6 = OfficePeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = OfficePeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = OfficePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					OfficePeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Office)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ClientService objects pre-filled with all related objects except Office.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ClientService objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptOffice(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ClientServicePeer::addSelectColumns($c);
		$startcol2 = (ClientServicePeer::NUM_COLUMNS - ClientServicePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (ClientPeer::NUM_COLUMNS - ClientPeer::NUM_LAZY_LOAD_COLUMNS);

		EmployeePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS);

		ServicePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ServicePeer::NUM_COLUMNS - ServicePeer::NUM_LAZY_LOAD_COLUMNS);

		FrequencyPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (FrequencyPeer::NUM_COLUMNS - FrequencyPeer::NUM_LAZY_LOAD_COLUMNS);

		Icd9Peer::addSelectColumns($c);
		$startcol7 = $startcol6 + (Icd9Peer::NUM_COLUMNS - Icd9Peer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ClientServicePeer::CLIENT_ID,), array(ClientPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::EMPLOYEE_ID,), array(EmployeePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::SERVICE_ID,), array(ServicePeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::FREQUENCY_ID,), array(FrequencyPeer::ID,), $join_behavior);
				$c->addJoin(array(ClientServicePeer::ICD9_ID,), array(Icd9Peer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ClientServicePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ClientServicePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ClientServicePeer::getOMClass($row, 0);

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ClientServicePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Client rows

				$key2 = ClientPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ClientPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = ClientPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ClientPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj2 (Client)
				$obj2->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Employee rows

				$key3 = EmployeePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = EmployeePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = EmployeePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					EmployeePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj3 (Employee)
				$obj3->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Service rows

				$key4 = ServicePeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = ServicePeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = ServicePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ServicePeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj4 (Service)
				$obj4->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Frequency rows

				$key5 = FrequencyPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = FrequencyPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = FrequencyPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					FrequencyPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj5 (Frequency)
				$obj5->addClientService($obj1);

			} // if joined row is not null

				// Add objects for joined Icd9 rows

				$key6 = Icd9Peer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = Icd9Peer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = Icd9Peer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					Icd9Peer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ClientService) to the collection in $obj6 (Icd9)
				$obj6->addClientService($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The returned Class will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @param      array $row PropelPDO result row.
	 * @param      int $colnum Column to examine for OM class information (first is 0).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getOMClass($row, $colnum)
	{
		try {

			$omClass = null;
			$classKey = $row[$colnum + 14];

			switch($classKey) {

				case self::CLASSKEY_PRESCHOOL:
					$omClass = self::CLASSNAME_PRESCHOOL;
					break;

				case self::CLASSKEY_SEIT:
					$omClass = self::CLASSNAME_SEIT;
					break;

				case self::CLASSKEY_EI:
					$omClass = self::CLASSNAME_EI;
					break;

				case self::CLASSKEY_CLASSROOM:
					$omClass = self::CLASSNAME_CLASSROOM;
					break;

				case self::CLASSKEY_SCHOOL_AGE:
					$omClass = self::CLASSNAME_SCHOOL_AGE;
					break;

				default:
					$omClass = self::CLASS_DEFAULT;

			} // switch

		} catch (Exception $e) {
			throw new PropelException('Unable to get OM class.', $e);
		}
		return $omClass;
	}

	/**
	 * Method perform an INSERT on the database, given a ClientService or Criteria object.
	 *
	 * @param      mixed $values Criteria or ClientService object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseClientServicePeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from ClientService object
		}

		if ($criteria->containsKey(ClientServicePeer::ID) && $criteria->keyContainsValue(ClientServicePeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.ClientServicePeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseClientServicePeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a ClientService or Criteria object.
	 *
	 * @param      mixed $values Criteria or ClientService object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseClientServicePeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseClientServicePeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ClientServicePeer::ID);
			$selectCriteria->add(ClientServicePeer::ID, $criteria->remove(ClientServicePeer::ID), $comparison);

		} else { // $values is ClientService object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseClientServicePeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseClientServicePeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the client_service table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			ClientServicePeer::doOnDeleteSetNull(new Criteria(ClientServicePeer::DATABASE_NAME), $con);
			$affectedRows += BasePeer::doDeleteAll(ClientServicePeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a ClientService or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or ClientService object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ClientServicePeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof ClientService) {
			// invalidate the cache for this single object
			ClientServicePeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ClientServicePeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ClientServicePeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			ClientServicePeer::doOnDeleteSetNull($criteria, $con);
			
				// Because this db requires some delete cascade/set null emulation, we have to
				// clear the cached instance *after* the emulation has happened (since
				// instances get re-added by the select statement contained therein).
				if ($values instanceof Criteria) {
					ClientServicePeer::clearInstancePool();
				} else { // it's a PK or object
					ClientServicePeer::removeInstanceFromPool($values);
				}
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			// invalidate objects in NoteEntryPeer instance pool, since one or more of them may be deleted by ON DELETE CASCADE rule.
			NoteEntryPeer::clearInstancePool();

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * This is a method for emulating ON DELETE SET NULL DBs that don't support this
	 * feature (like MySQL or SQLite).
	 *
	 * This method is not very speedy because it must perform a query first to get
	 * the implicated records and then perform the deletes by calling those Peer classes.
	 *
	 * This method should be used within a transaction if possible.
	 *
	 * @param      Criteria $criteria
	 * @param      PropelPDO $con
	 * @return     void
	 */
	protected static function doOnDeleteSetNull(Criteria $criteria, PropelPDO $con)
	{

		// first find the objects that are implicated by the $criteria
		$objects = ClientServicePeer::doSelect($criteria, $con);
		foreach ($objects as $obj) {

			// set fkey col in related NoteEntry rows to NULL
			$selectCriteria = new Criteria(ClientServicePeer::DATABASE_NAME);
			$updateValues = new Criteria(ClientServicePeer::DATABASE_NAME);
			$selectCriteria->add(NoteEntryPeer::CLIENT_SERVICE_ID, $obj->getId());
			$updateValues->add(NoteEntryPeer::CLIENT_SERVICE_ID, null);

					BasePeer::doUpdate($selectCriteria, $updateValues, $con); // use BasePeer because generated Peer doUpdate() methods only update using pkey

		}
	}

	/**
	 * Validates all modified columns of given ClientService object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      ClientService $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(ClientService $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ClientServicePeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ClientServicePeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ClientServicePeer::DATABASE_NAME, ClientServicePeer::TABLE_NAME, $columns);
    if ($res !== true) {
        foreach ($res as $failed) {
            $col = ClientServicePeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     ClientService
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ClientServicePeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
		$criteria->add(ClientServicePeer::ID, $pk);

		$v = ClientServicePeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ClientServicePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ClientServicePeer::DATABASE_NAME);
			$criteria->add(ClientServicePeer::ID, $pks, Criteria::IN);
			$objs = ClientServicePeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseClientServicePeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ClientServicePeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ClientServicePeer class:
//
// Propel::getDatabaseMap(ClientServicePeer::DATABASE_NAME)->addTableBuilder(ClientServicePeer::TABLE_NAME, ClientServicePeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseClientServicePeer::DATABASE_NAME)->addTableBuilder(BaseClientServicePeer::TABLE_NAME, BaseClientServicePeer::getMapBuilder());

